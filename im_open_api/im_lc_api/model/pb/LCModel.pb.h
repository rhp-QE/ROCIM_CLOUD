// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: LCModel.proto
// Protobuf C++ Version: 5.29.3

#ifndef LCModel_2eproto_2epb_2eh
#define LCModel_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029003
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/map.h"  // IWYU pragma: export
#include "google/protobuf/map_entry.h"
#include "google/protobuf/map_field_inl.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_LCModel_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_LCModel_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_LCModel_2eproto;
namespace roc {
namespace im {
namespace sdk {
namespace net {
class CmdMessage;
struct CmdMessageDefaultTypeInternal;
extern CmdMessageDefaultTypeInternal _CmdMessage_default_instance_;
class ContentMessage;
struct ContentMessageDefaultTypeInternal;
extern ContentMessageDefaultTypeInternal _ContentMessage_default_instance_;
class ContentMessage_ExtEntry_DoNotUse;
struct ContentMessage_ExtEntry_DoNotUseDefaultTypeInternal;
extern ContentMessage_ExtEntry_DoNotUseDefaultTypeInternal _ContentMessage_ExtEntry_DoNotUse_default_instance_;
class Conversation;
struct ConversationDefaultTypeInternal;
extern ConversationDefaultTypeInternal _Conversation_default_instance_;
class ConversationMessages;
struct ConversationMessagesDefaultTypeInternal;
extern ConversationMessagesDefaultTypeInternal _ConversationMessages_default_instance_;
class Conversation_ExtEntry_DoNotUse;
struct Conversation_ExtEntry_DoNotUseDefaultTypeInternal;
extern Conversation_ExtEntry_DoNotUseDefaultTypeInternal _Conversation_ExtEntry_DoNotUse_default_instance_;
class FetchMixedLinkMessagesReq;
struct FetchMixedLinkMessagesReqDefaultTypeInternal;
extern FetchMixedLinkMessagesReqDefaultTypeInternal _FetchMixedLinkMessagesReq_default_instance_;
class FetchMixedLinkMessagesResp;
struct FetchMixedLinkMessagesRespDefaultTypeInternal;
extern FetchMixedLinkMessagesRespDefaultTypeInternal _FetchMixedLinkMessagesResp_default_instance_;
class FetchSingleLinkMessagesReq;
struct FetchSingleLinkMessagesReqDefaultTypeInternal;
extern FetchSingleLinkMessagesReqDefaultTypeInternal _FetchSingleLinkMessagesReq_default_instance_;
class FetchSingleLinkMessagesResp;
struct FetchSingleLinkMessagesRespDefaultTypeInternal;
extern FetchSingleLinkMessagesRespDefaultTypeInternal _FetchSingleLinkMessagesResp_default_instance_;
class Message;
struct MessageDefaultTypeInternal;
extern MessageDefaultTypeInternal _Message_default_instance_;
class PushMessages;
struct PushMessagesDefaultTypeInternal;
extern PushMessagesDefaultTypeInternal _PushMessages_default_instance_;
class RequestBody;
struct RequestBodyDefaultTypeInternal;
extern RequestBodyDefaultTypeInternal _RequestBody_default_instance_;
class ResponseBody;
struct ResponseBodyDefaultTypeInternal;
extern ResponseBodyDefaultTypeInternal _ResponseBody_default_instance_;
class SendBatchMessageReq;
struct SendBatchMessageReqDefaultTypeInternal;
extern SendBatchMessageReqDefaultTypeInternal _SendBatchMessageReq_default_instance_;
class SendBatchMessageResp;
struct SendBatchMessageRespDefaultTypeInternal;
extern SendBatchMessageRespDefaultTypeInternal _SendBatchMessageResp_default_instance_;
}  // namespace net
}  // namespace sdk
}  // namespace im
}  // namespace roc
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace roc {
namespace im {
namespace sdk {
namespace net {

// ===================================================================


// -------------------------------------------------------------------

class SendBatchMessageResp final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:roc.im.sdk.net.SendBatchMessageResp) */ {
 public:
  inline SendBatchMessageResp() : SendBatchMessageResp(nullptr) {}
  ~SendBatchMessageResp() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SendBatchMessageResp* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SendBatchMessageResp));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SendBatchMessageResp(
      ::google::protobuf::internal::ConstantInitialized);

  inline SendBatchMessageResp(const SendBatchMessageResp& from) : SendBatchMessageResp(nullptr, from) {}
  inline SendBatchMessageResp(SendBatchMessageResp&& from) noexcept
      : SendBatchMessageResp(nullptr, std::move(from)) {}
  inline SendBatchMessageResp& operator=(const SendBatchMessageResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline SendBatchMessageResp& operator=(SendBatchMessageResp&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SendBatchMessageResp& default_instance() {
    return *internal_default_instance();
  }
  static inline const SendBatchMessageResp* internal_default_instance() {
    return reinterpret_cast<const SendBatchMessageResp*>(
        &_SendBatchMessageResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 12;
  friend void swap(SendBatchMessageResp& a, SendBatchMessageResp& b) { a.Swap(&b); }
  inline void Swap(SendBatchMessageResp* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SendBatchMessageResp* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SendBatchMessageResp* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<SendBatchMessageResp>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SendBatchMessageResp& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SendBatchMessageResp& from) { SendBatchMessageResp::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(SendBatchMessageResp* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "roc.im.sdk.net.SendBatchMessageResp"; }

 protected:
  explicit SendBatchMessageResp(::google::protobuf::Arena* arena);
  SendBatchMessageResp(::google::protobuf::Arena* arena, const SendBatchMessageResp& from);
  SendBatchMessageResp(::google::protobuf::Arena* arena, SendBatchMessageResp&& from) noexcept
      : SendBatchMessageResp(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kSendMessageResponseArrFieldNumber = 1,
  };
  // repeated .roc.im.sdk.net.SendBatchMessageResp send_message_response_arr = 1;
  int send_message_response_arr_size() const;
  private:
  int _internal_send_message_response_arr_size() const;

  public:
  void clear_send_message_response_arr() ;
  ::roc::im::sdk::net::SendBatchMessageResp* mutable_send_message_response_arr(int index);
  ::google::protobuf::RepeatedPtrField<::roc::im::sdk::net::SendBatchMessageResp>* mutable_send_message_response_arr();

  private:
  const ::google::protobuf::RepeatedPtrField<::roc::im::sdk::net::SendBatchMessageResp>& _internal_send_message_response_arr() const;
  ::google::protobuf::RepeatedPtrField<::roc::im::sdk::net::SendBatchMessageResp>* _internal_mutable_send_message_response_arr();
  public:
  const ::roc::im::sdk::net::SendBatchMessageResp& send_message_response_arr(int index) const;
  ::roc::im::sdk::net::SendBatchMessageResp* add_send_message_response_arr();
  const ::google::protobuf::RepeatedPtrField<::roc::im::sdk::net::SendBatchMessageResp>& send_message_response_arr() const;
  // @@protoc_insertion_point(class_scope:roc.im.sdk.net.SendBatchMessageResp)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const SendBatchMessageResp& from_msg);
    ::google::protobuf::RepeatedPtrField< ::roc::im::sdk::net::SendBatchMessageResp > send_message_response_arr_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_LCModel_2eproto;
};
// -------------------------------------------------------------------

class FetchSingleLinkMessagesReq final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:roc.im.sdk.net.FetchSingleLinkMessagesReq) */ {
 public:
  inline FetchSingleLinkMessagesReq() : FetchSingleLinkMessagesReq(nullptr) {}
  ~FetchSingleLinkMessagesReq() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(FetchSingleLinkMessagesReq* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(FetchSingleLinkMessagesReq));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR FetchSingleLinkMessagesReq(
      ::google::protobuf::internal::ConstantInitialized);

  inline FetchSingleLinkMessagesReq(const FetchSingleLinkMessagesReq& from) : FetchSingleLinkMessagesReq(nullptr, from) {}
  inline FetchSingleLinkMessagesReq(FetchSingleLinkMessagesReq&& from) noexcept
      : FetchSingleLinkMessagesReq(nullptr, std::move(from)) {}
  inline FetchSingleLinkMessagesReq& operator=(const FetchSingleLinkMessagesReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline FetchSingleLinkMessagesReq& operator=(FetchSingleLinkMessagesReq&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FetchSingleLinkMessagesReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const FetchSingleLinkMessagesReq* internal_default_instance() {
    return reinterpret_cast<const FetchSingleLinkMessagesReq*>(
        &_FetchSingleLinkMessagesReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 7;
  friend void swap(FetchSingleLinkMessagesReq& a, FetchSingleLinkMessagesReq& b) { a.Swap(&b); }
  inline void Swap(FetchSingleLinkMessagesReq* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FetchSingleLinkMessagesReq* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FetchSingleLinkMessagesReq* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<FetchSingleLinkMessagesReq>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const FetchSingleLinkMessagesReq& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const FetchSingleLinkMessagesReq& from) { FetchSingleLinkMessagesReq::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(FetchSingleLinkMessagesReq* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "roc.im.sdk.net.FetchSingleLinkMessagesReq"; }

 protected:
  explicit FetchSingleLinkMessagesReq(::google::protobuf::Arena* arena);
  FetchSingleLinkMessagesReq(::google::protobuf::Arena* arena, const FetchSingleLinkMessagesReq& from);
  FetchSingleLinkMessagesReq(::google::protobuf::Arena* arena, FetchSingleLinkMessagesReq&& from) noexcept
      : FetchSingleLinkMessagesReq(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kConversationIdFieldNumber = 1,
    kFromIndexFieldNumber = 2,
    kToIndexFieldNumber = 3,
  };
  // string conversation_id = 1;
  void clear_conversation_id() ;
  const std::string& conversation_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_conversation_id(Arg_&& arg, Args_... args);
  std::string* mutable_conversation_id();
  PROTOBUF_NODISCARD std::string* release_conversation_id();
  void set_allocated_conversation_id(std::string* value);

  private:
  const std::string& _internal_conversation_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_conversation_id(
      const std::string& value);
  std::string* _internal_mutable_conversation_id();

  public:
  // int64 from_index = 2;
  void clear_from_index() ;
  ::int64_t from_index() const;
  void set_from_index(::int64_t value);

  private:
  ::int64_t _internal_from_index() const;
  void _internal_set_from_index(::int64_t value);

  public:
  // int64 to_index = 3;
  void clear_to_index() ;
  ::int64_t to_index() const;
  void set_to_index(::int64_t value);

  private:
  ::int64_t _internal_to_index() const;
  void _internal_set_to_index(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:roc.im.sdk.net.FetchSingleLinkMessagesReq)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      65, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const FetchSingleLinkMessagesReq& from_msg);
    ::google::protobuf::internal::ArenaStringPtr conversation_id_;
    ::int64_t from_index_;
    ::int64_t to_index_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_LCModel_2eproto;
};
// -------------------------------------------------------------------

class FetchMixedLinkMessagesReq final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:roc.im.sdk.net.FetchMixedLinkMessagesReq) */ {
 public:
  inline FetchMixedLinkMessagesReq() : FetchMixedLinkMessagesReq(nullptr) {}
  ~FetchMixedLinkMessagesReq() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(FetchMixedLinkMessagesReq* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(FetchMixedLinkMessagesReq));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR FetchMixedLinkMessagesReq(
      ::google::protobuf::internal::ConstantInitialized);

  inline FetchMixedLinkMessagesReq(const FetchMixedLinkMessagesReq& from) : FetchMixedLinkMessagesReq(nullptr, from) {}
  inline FetchMixedLinkMessagesReq(FetchMixedLinkMessagesReq&& from) noexcept
      : FetchMixedLinkMessagesReq(nullptr, std::move(from)) {}
  inline FetchMixedLinkMessagesReq& operator=(const FetchMixedLinkMessagesReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline FetchMixedLinkMessagesReq& operator=(FetchMixedLinkMessagesReq&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FetchMixedLinkMessagesReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const FetchMixedLinkMessagesReq* internal_default_instance() {
    return reinterpret_cast<const FetchMixedLinkMessagesReq*>(
        &_FetchMixedLinkMessagesReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 9;
  friend void swap(FetchMixedLinkMessagesReq& a, FetchMixedLinkMessagesReq& b) { a.Swap(&b); }
  inline void Swap(FetchMixedLinkMessagesReq* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FetchMixedLinkMessagesReq* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FetchMixedLinkMessagesReq* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<FetchMixedLinkMessagesReq>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const FetchMixedLinkMessagesReq& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const FetchMixedLinkMessagesReq& from) { FetchMixedLinkMessagesReq::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(FetchMixedLinkMessagesReq* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "roc.im.sdk.net.FetchMixedLinkMessagesReq"; }

 protected:
  explicit FetchMixedLinkMessagesReq(::google::protobuf::Arena* arena);
  FetchMixedLinkMessagesReq(::google::protobuf::Arena* arena, const FetchMixedLinkMessagesReq& from);
  FetchMixedLinkMessagesReq(::google::protobuf::Arena* arena, FetchMixedLinkMessagesReq&& from) noexcept
      : FetchMixedLinkMessagesReq(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kConversationIdArrFieldNumber = 1,
    kCountFieldNumber = 2,
  };
  // repeated string conversation_id_arr = 1;
  int conversation_id_arr_size() const;
  private:
  int _internal_conversation_id_arr_size() const;

  public:
  void clear_conversation_id_arr() ;
  const std::string& conversation_id_arr(int index) const;
  std::string* mutable_conversation_id_arr(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_conversation_id_arr(int index, Arg_&& value, Args_... args);
  std::string* add_conversation_id_arr();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_conversation_id_arr(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& conversation_id_arr() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_conversation_id_arr();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_conversation_id_arr() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_conversation_id_arr();

  public:
  // int64 count = 2;
  void clear_count() ;
  ::int64_t count() const;
  void set_count(::int64_t value);

  private:
  ::int64_t _internal_count() const;
  void _internal_set_count(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:roc.im.sdk.net.FetchMixedLinkMessagesReq)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      68, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const FetchMixedLinkMessagesReq& from_msg);
    ::google::protobuf::RepeatedPtrField<std::string> conversation_id_arr_;
    ::int64_t count_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_LCModel_2eproto;
};
// -------------------------------------------------------------------

class Conversation_ExtEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  Conversation_ExtEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Conversation_ExtEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit Conversation_ExtEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const Conversation_ExtEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const Conversation_ExtEntry_DoNotUse*>(
        &_Conversation_ExtEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_LCModel_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      53, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class ContentMessage_ExtEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  ContentMessage_ExtEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ContentMessage_ExtEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit ContentMessage_ExtEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const ContentMessage_ExtEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const ContentMessage_ExtEntry_DoNotUse*>(
        &_ContentMessage_ExtEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_LCModel_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      55, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class CmdMessage final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:roc.im.sdk.net.CmdMessage) */ {
 public:
  inline CmdMessage() : CmdMessage(nullptr) {}
  ~CmdMessage() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(CmdMessage* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(CmdMessage));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR CmdMessage(
      ::google::protobuf::internal::ConstantInitialized);

  inline CmdMessage(const CmdMessage& from) : CmdMessage(nullptr, from) {}
  inline CmdMessage(CmdMessage&& from) noexcept
      : CmdMessage(nullptr, std::move(from)) {}
  inline CmdMessage& operator=(const CmdMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline CmdMessage& operator=(CmdMessage&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CmdMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const CmdMessage* internal_default_instance() {
    return reinterpret_cast<const CmdMessage*>(
        &_CmdMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(CmdMessage& a, CmdMessage& b) { a.Swap(&b); }
  inline void Swap(CmdMessage* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CmdMessage* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CmdMessage* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<CmdMessage>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CmdMessage& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const CmdMessage& from) { CmdMessage::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(CmdMessage* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "roc.im.sdk.net.CmdMessage"; }

 protected:
  explicit CmdMessage(::google::protobuf::Arena* arena);
  CmdMessage(::google::protobuf::Arena* arena, const CmdMessage& from);
  CmdMessage(::google::protobuf::Arena* arena, CmdMessage&& from) noexcept
      : CmdMessage(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kCmdFieldNumber = 1,
  };
  // int64 cmd = 1;
  void clear_cmd() ;
  ::int64_t cmd() const;
  void set_cmd(::int64_t value);

  private:
  ::int64_t _internal_cmd() const;
  void _internal_set_cmd(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:roc.im.sdk.net.CmdMessage)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const CmdMessage& from_msg);
    ::int64_t cmd_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_LCModel_2eproto;
};
// -------------------------------------------------------------------

class Conversation final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:roc.im.sdk.net.Conversation) */ {
 public:
  inline Conversation() : Conversation(nullptr) {}
  ~Conversation() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Conversation* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Conversation));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Conversation(
      ::google::protobuf::internal::ConstantInitialized);

  inline Conversation(const Conversation& from) : Conversation(nullptr, from) {}
  inline Conversation(Conversation&& from) noexcept
      : Conversation(nullptr, std::move(from)) {}
  inline Conversation& operator=(const Conversation& from) {
    CopyFrom(from);
    return *this;
  }
  inline Conversation& operator=(Conversation&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Conversation& default_instance() {
    return *internal_default_instance();
  }
  static inline const Conversation* internal_default_instance() {
    return reinterpret_cast<const Conversation*>(
        &_Conversation_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(Conversation& a, Conversation& b) { a.Swap(&b); }
  inline void Swap(Conversation* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Conversation* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Conversation* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Conversation>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Conversation& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Conversation& from) { Conversation::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Conversation* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "roc.im.sdk.net.Conversation"; }

 protected:
  explicit Conversation(::google::protobuf::Arena* arena);
  Conversation(::google::protobuf::Arena* arena, const Conversation& from);
  Conversation(::google::protobuf::Arena* arena, Conversation&& from) noexcept
      : Conversation(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kExtFieldNumber = 3,
    kConvertsionIdFieldNumber = 1,
    kOwnerIdFieldNumber = 2,
  };
  // map<string, string> ext = 3;
  int ext_size() const;
  private:
  int _internal_ext_size() const;

  public:
  void clear_ext() ;
  const ::google::protobuf::Map<std::string, std::string>& ext() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_ext();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_ext() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_ext();

  public:
  // string convertsion_id = 1;
  void clear_convertsion_id() ;
  const std::string& convertsion_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_convertsion_id(Arg_&& arg, Args_... args);
  std::string* mutable_convertsion_id();
  PROTOBUF_NODISCARD std::string* release_convertsion_id();
  void set_allocated_convertsion_id(std::string* value);

  private:
  const std::string& _internal_convertsion_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_convertsion_id(
      const std::string& value);
  std::string* _internal_mutable_convertsion_id();

  public:
  // string owner_id = 2;
  void clear_owner_id() ;
  const std::string& owner_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_owner_id(Arg_&& arg, Args_... args);
  std::string* mutable_owner_id();
  PROTOBUF_NODISCARD std::string* release_owner_id();
  void set_allocated_owner_id(std::string* value);

  private:
  const std::string& _internal_owner_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_owner_id(
      const std::string& value);
  std::string* _internal_mutable_owner_id();

  public:
  // @@protoc_insertion_point(class_scope:roc.im.sdk.net.Conversation)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 3, 1,
      61, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Conversation& from_msg);
    ::google::protobuf::internal::MapField<Conversation_ExtEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        ext_;
    ::google::protobuf::internal::ArenaStringPtr convertsion_id_;
    ::google::protobuf::internal::ArenaStringPtr owner_id_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_LCModel_2eproto;
};
// -------------------------------------------------------------------

class ContentMessage final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:roc.im.sdk.net.ContentMessage) */ {
 public:
  inline ContentMessage() : ContentMessage(nullptr) {}
  ~ContentMessage() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ContentMessage* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ContentMessage));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ContentMessage(
      ::google::protobuf::internal::ConstantInitialized);

  inline ContentMessage(const ContentMessage& from) : ContentMessage(nullptr, from) {}
  inline ContentMessage(ContentMessage&& from) noexcept
      : ContentMessage(nullptr, std::move(from)) {}
  inline ContentMessage& operator=(const ContentMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ContentMessage& operator=(ContentMessage&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ContentMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const ContentMessage* internal_default_instance() {
    return reinterpret_cast<const ContentMessage*>(
        &_ContentMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(ContentMessage& a, ContentMessage& b) { a.Swap(&b); }
  inline void Swap(ContentMessage* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ContentMessage* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ContentMessage* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ContentMessage>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ContentMessage& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ContentMessage& from) { ContentMessage::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ContentMessage* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "roc.im.sdk.net.ContentMessage"; }

 protected:
  explicit ContentMessage(::google::protobuf::Arena* arena);
  ContentMessage(::google::protobuf::Arena* arena, const ContentMessage& from);
  ContentMessage(::google::protobuf::Arena* arena, ContentMessage&& from) noexcept
      : ContentMessage(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kExtFieldNumber = 3,
    kMessageIdFieldNumber = 1,
    kContentFieldNumber = 2,
    kSenderIdFieldNumber = 4,
    kConvertsionIdFieldNumber = 5,
    kMessageTypeFieldNumber = 6,
    kIndexFieldNumber = 7,
  };
  // map<string, string> ext = 3;
  int ext_size() const;
  private:
  int _internal_ext_size() const;

  public:
  void clear_ext() ;
  const ::google::protobuf::Map<std::string, std::string>& ext() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_ext();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_ext() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_ext();

  public:
  // string message_id = 1;
  void clear_message_id() ;
  const std::string& message_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_message_id(Arg_&& arg, Args_... args);
  std::string* mutable_message_id();
  PROTOBUF_NODISCARD std::string* release_message_id();
  void set_allocated_message_id(std::string* value);

  private:
  const std::string& _internal_message_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message_id(
      const std::string& value);
  std::string* _internal_mutable_message_id();

  public:
  // bytes content = 2;
  void clear_content() ;
  const std::string& content() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_content(Arg_&& arg, Args_... args);
  std::string* mutable_content();
  PROTOBUF_NODISCARD std::string* release_content();
  void set_allocated_content(std::string* value);

  private:
  const std::string& _internal_content() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content(
      const std::string& value);
  std::string* _internal_mutable_content();

  public:
  // string sender_id = 4;
  void clear_sender_id() ;
  const std::string& sender_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_sender_id(Arg_&& arg, Args_... args);
  std::string* mutable_sender_id();
  PROTOBUF_NODISCARD std::string* release_sender_id();
  void set_allocated_sender_id(std::string* value);

  private:
  const std::string& _internal_sender_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sender_id(
      const std::string& value);
  std::string* _internal_mutable_sender_id();

  public:
  // string convertsion_id = 5;
  void clear_convertsion_id() ;
  const std::string& convertsion_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_convertsion_id(Arg_&& arg, Args_... args);
  std::string* mutable_convertsion_id();
  PROTOBUF_NODISCARD std::string* release_convertsion_id();
  void set_allocated_convertsion_id(std::string* value);

  private:
  const std::string& _internal_convertsion_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_convertsion_id(
      const std::string& value);
  std::string* _internal_mutable_convertsion_id();

  public:
  // int64 message_type = 6;
  void clear_message_type() ;
  ::int64_t message_type() const;
  void set_message_type(::int64_t value);

  private:
  ::int64_t _internal_message_type() const;
  void _internal_set_message_type(::int64_t value);

  public:
  // int64 index = 7;
  void clear_index() ;
  ::int64_t index() const;
  void set_index(::int64_t value);

  private:
  ::int64_t _internal_index() const;
  void _internal_set_index(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:roc.im.sdk.net.ContentMessage)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 7, 1,
      74, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ContentMessage& from_msg);
    ::google::protobuf::internal::MapField<ContentMessage_ExtEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        ext_;
    ::google::protobuf::internal::ArenaStringPtr message_id_;
    ::google::protobuf::internal::ArenaStringPtr content_;
    ::google::protobuf::internal::ArenaStringPtr sender_id_;
    ::google::protobuf::internal::ArenaStringPtr convertsion_id_;
    ::int64_t message_type_;
    ::int64_t index_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_LCModel_2eproto;
};
// -------------------------------------------------------------------

class SendBatchMessageReq final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:roc.im.sdk.net.SendBatchMessageReq) */ {
 public:
  inline SendBatchMessageReq() : SendBatchMessageReq(nullptr) {}
  ~SendBatchMessageReq() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SendBatchMessageReq* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SendBatchMessageReq));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SendBatchMessageReq(
      ::google::protobuf::internal::ConstantInitialized);

  inline SendBatchMessageReq(const SendBatchMessageReq& from) : SendBatchMessageReq(nullptr, from) {}
  inline SendBatchMessageReq(SendBatchMessageReq&& from) noexcept
      : SendBatchMessageReq(nullptr, std::move(from)) {}
  inline SendBatchMessageReq& operator=(const SendBatchMessageReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline SendBatchMessageReq& operator=(SendBatchMessageReq&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SendBatchMessageReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const SendBatchMessageReq* internal_default_instance() {
    return reinterpret_cast<const SendBatchMessageReq*>(
        &_SendBatchMessageReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 11;
  friend void swap(SendBatchMessageReq& a, SendBatchMessageReq& b) { a.Swap(&b); }
  inline void Swap(SendBatchMessageReq* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SendBatchMessageReq* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SendBatchMessageReq* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<SendBatchMessageReq>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SendBatchMessageReq& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SendBatchMessageReq& from) { SendBatchMessageReq::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(SendBatchMessageReq* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "roc.im.sdk.net.SendBatchMessageReq"; }

 protected:
  explicit SendBatchMessageReq(::google::protobuf::Arena* arena);
  SendBatchMessageReq(::google::protobuf::Arena* arena, const SendBatchMessageReq& from);
  SendBatchMessageReq(::google::protobuf::Arena* arena, SendBatchMessageReq&& from) noexcept
      : SendBatchMessageReq(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kMessageArrFieldNumber = 1,
  };
  // repeated .roc.im.sdk.net.ContentMessage message_arr = 1;
  int message_arr_size() const;
  private:
  int _internal_message_arr_size() const;

  public:
  void clear_message_arr() ;
  ::roc::im::sdk::net::ContentMessage* mutable_message_arr(int index);
  ::google::protobuf::RepeatedPtrField<::roc::im::sdk::net::ContentMessage>* mutable_message_arr();

  private:
  const ::google::protobuf::RepeatedPtrField<::roc::im::sdk::net::ContentMessage>& _internal_message_arr() const;
  ::google::protobuf::RepeatedPtrField<::roc::im::sdk::net::ContentMessage>* _internal_mutable_message_arr();
  public:
  const ::roc::im::sdk::net::ContentMessage& message_arr(int index) const;
  ::roc::im::sdk::net::ContentMessage* add_message_arr();
  const ::google::protobuf::RepeatedPtrField<::roc::im::sdk::net::ContentMessage>& message_arr() const;
  // @@protoc_insertion_point(class_scope:roc.im.sdk.net.SendBatchMessageReq)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const SendBatchMessageReq& from_msg);
    ::google::protobuf::RepeatedPtrField< ::roc::im::sdk::net::ContentMessage > message_arr_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_LCModel_2eproto;
};
// -------------------------------------------------------------------

class Message final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:roc.im.sdk.net.Message) */ {
 public:
  inline Message() : Message(nullptr) {}
  ~Message() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Message* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Message));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message(const Message& from) : Message(nullptr, from) {}
  inline Message(Message&& from) noexcept
      : Message(nullptr, std::move(from)) {}
  inline Message& operator=(const Message& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message& operator=(Message&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message* internal_default_instance() {
    return reinterpret_cast<const Message*>(
        &_Message_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 5;
  friend void swap(Message& a, Message& b) { a.Swap(&b); }
  inline void Swap(Message* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Message>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message& from) { Message::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Message* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "roc.im.sdk.net.Message"; }

 protected:
  explicit Message(::google::protobuf::Arena* arena);
  Message(::google::protobuf::Arena* arena, const Message& from);
  Message(::google::protobuf::Arena* arena, Message&& from) noexcept
      : Message(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kCmdMessageFieldNumber = 2,
    kContentMessageFieldNumber = 3,
    kIsCmdFieldNumber = 1,
  };
  // .roc.im.sdk.net.CmdMessage cmdMessage = 2;
  bool has_cmdmessage() const;
  void clear_cmdmessage() ;
  const ::roc::im::sdk::net::CmdMessage& cmdmessage() const;
  PROTOBUF_NODISCARD ::roc::im::sdk::net::CmdMessage* release_cmdmessage();
  ::roc::im::sdk::net::CmdMessage* mutable_cmdmessage();
  void set_allocated_cmdmessage(::roc::im::sdk::net::CmdMessage* value);
  void unsafe_arena_set_allocated_cmdmessage(::roc::im::sdk::net::CmdMessage* value);
  ::roc::im::sdk::net::CmdMessage* unsafe_arena_release_cmdmessage();

  private:
  const ::roc::im::sdk::net::CmdMessage& _internal_cmdmessage() const;
  ::roc::im::sdk::net::CmdMessage* _internal_mutable_cmdmessage();

  public:
  // .roc.im.sdk.net.ContentMessage contentMessage = 3;
  bool has_contentmessage() const;
  void clear_contentmessage() ;
  const ::roc::im::sdk::net::ContentMessage& contentmessage() const;
  PROTOBUF_NODISCARD ::roc::im::sdk::net::ContentMessage* release_contentmessage();
  ::roc::im::sdk::net::ContentMessage* mutable_contentmessage();
  void set_allocated_contentmessage(::roc::im::sdk::net::ContentMessage* value);
  void unsafe_arena_set_allocated_contentmessage(::roc::im::sdk::net::ContentMessage* value);
  ::roc::im::sdk::net::ContentMessage* unsafe_arena_release_contentmessage();

  private:
  const ::roc::im::sdk::net::ContentMessage& _internal_contentmessage() const;
  ::roc::im::sdk::net::ContentMessage* _internal_mutable_contentmessage();

  public:
  // bool isCmd = 1;
  void clear_iscmd() ;
  bool iscmd() const;
  void set_iscmd(bool value);

  private:
  bool _internal_iscmd() const;
  void _internal_set_iscmd(bool value);

  public:
  // @@protoc_insertion_point(class_scope:roc.im.sdk.net.Message)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 2,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Message& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::roc::im::sdk::net::CmdMessage* cmdmessage_;
    ::roc::im::sdk::net::ContentMessage* contentmessage_;
    bool iscmd_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_LCModel_2eproto;
};
// -------------------------------------------------------------------

class RequestBody final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:roc.im.sdk.net.RequestBody) */ {
 public:
  inline RequestBody() : RequestBody(nullptr) {}
  ~RequestBody() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(RequestBody* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(RequestBody));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR RequestBody(
      ::google::protobuf::internal::ConstantInitialized);

  inline RequestBody(const RequestBody& from) : RequestBody(nullptr, from) {}
  inline RequestBody(RequestBody&& from) noexcept
      : RequestBody(nullptr, std::move(from)) {}
  inline RequestBody& operator=(const RequestBody& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestBody& operator=(RequestBody&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RequestBody& default_instance() {
    return *internal_default_instance();
  }
  static inline const RequestBody* internal_default_instance() {
    return reinterpret_cast<const RequestBody*>(
        &_RequestBody_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 14;
  friend void swap(RequestBody& a, RequestBody& b) { a.Swap(&b); }
  inline void Swap(RequestBody* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequestBody* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RequestBody* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<RequestBody>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const RequestBody& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const RequestBody& from) { RequestBody::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(RequestBody* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "roc.im.sdk.net.RequestBody"; }

 protected:
  explicit RequestBody(::google::protobuf::Arena* arena);
  RequestBody(::google::protobuf::Arena* arena, const RequestBody& from);
  RequestBody(::google::protobuf::Arena* arena, RequestBody&& from) noexcept
      : RequestBody(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kRequestIdFieldNumber = 1,
    kUrlFieldNumber = 5,
    kFetchMixedLinkMessagesRequestFieldNumber = 2,
    kFetchSingleLinkMessagesRequestFieldNumber = 3,
    kSendBatchMessagesRequestFieldNumber = 4,
  };
  // string request_id = 1;
  void clear_request_id() ;
  const std::string& request_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_request_id(Arg_&& arg, Args_... args);
  std::string* mutable_request_id();
  PROTOBUF_NODISCARD std::string* release_request_id();
  void set_allocated_request_id(std::string* value);

  private:
  const std::string& _internal_request_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_request_id(
      const std::string& value);
  std::string* _internal_mutable_request_id();

  public:
  // string url = 5;
  void clear_url() ;
  const std::string& url() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_url(Arg_&& arg, Args_... args);
  std::string* mutable_url();
  PROTOBUF_NODISCARD std::string* release_url();
  void set_allocated_url(std::string* value);

  private:
  const std::string& _internal_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_url(
      const std::string& value);
  std::string* _internal_mutable_url();

  public:
  // .roc.im.sdk.net.FetchMixedLinkMessagesReq fetch_mixed_link_messages_request = 2;
  bool has_fetch_mixed_link_messages_request() const;
  void clear_fetch_mixed_link_messages_request() ;
  const ::roc::im::sdk::net::FetchMixedLinkMessagesReq& fetch_mixed_link_messages_request() const;
  PROTOBUF_NODISCARD ::roc::im::sdk::net::FetchMixedLinkMessagesReq* release_fetch_mixed_link_messages_request();
  ::roc::im::sdk::net::FetchMixedLinkMessagesReq* mutable_fetch_mixed_link_messages_request();
  void set_allocated_fetch_mixed_link_messages_request(::roc::im::sdk::net::FetchMixedLinkMessagesReq* value);
  void unsafe_arena_set_allocated_fetch_mixed_link_messages_request(::roc::im::sdk::net::FetchMixedLinkMessagesReq* value);
  ::roc::im::sdk::net::FetchMixedLinkMessagesReq* unsafe_arena_release_fetch_mixed_link_messages_request();

  private:
  const ::roc::im::sdk::net::FetchMixedLinkMessagesReq& _internal_fetch_mixed_link_messages_request() const;
  ::roc::im::sdk::net::FetchMixedLinkMessagesReq* _internal_mutable_fetch_mixed_link_messages_request();

  public:
  // .roc.im.sdk.net.FetchSingleLinkMessagesReq fetch_single_link_messages_request = 3;
  bool has_fetch_single_link_messages_request() const;
  void clear_fetch_single_link_messages_request() ;
  const ::roc::im::sdk::net::FetchSingleLinkMessagesReq& fetch_single_link_messages_request() const;
  PROTOBUF_NODISCARD ::roc::im::sdk::net::FetchSingleLinkMessagesReq* release_fetch_single_link_messages_request();
  ::roc::im::sdk::net::FetchSingleLinkMessagesReq* mutable_fetch_single_link_messages_request();
  void set_allocated_fetch_single_link_messages_request(::roc::im::sdk::net::FetchSingleLinkMessagesReq* value);
  void unsafe_arena_set_allocated_fetch_single_link_messages_request(::roc::im::sdk::net::FetchSingleLinkMessagesReq* value);
  ::roc::im::sdk::net::FetchSingleLinkMessagesReq* unsafe_arena_release_fetch_single_link_messages_request();

  private:
  const ::roc::im::sdk::net::FetchSingleLinkMessagesReq& _internal_fetch_single_link_messages_request() const;
  ::roc::im::sdk::net::FetchSingleLinkMessagesReq* _internal_mutable_fetch_single_link_messages_request();

  public:
  // .roc.im.sdk.net.SendBatchMessageReq send_batch_messages_request = 4;
  bool has_send_batch_messages_request() const;
  void clear_send_batch_messages_request() ;
  const ::roc::im::sdk::net::SendBatchMessageReq& send_batch_messages_request() const;
  PROTOBUF_NODISCARD ::roc::im::sdk::net::SendBatchMessageReq* release_send_batch_messages_request();
  ::roc::im::sdk::net::SendBatchMessageReq* mutable_send_batch_messages_request();
  void set_allocated_send_batch_messages_request(::roc::im::sdk::net::SendBatchMessageReq* value);
  void unsafe_arena_set_allocated_send_batch_messages_request(::roc::im::sdk::net::SendBatchMessageReq* value);
  ::roc::im::sdk::net::SendBatchMessageReq* unsafe_arena_release_send_batch_messages_request();

  private:
  const ::roc::im::sdk::net::SendBatchMessageReq& _internal_send_batch_messages_request() const;
  ::roc::im::sdk::net::SendBatchMessageReq* _internal_mutable_send_batch_messages_request();

  public:
  // @@protoc_insertion_point(class_scope:roc.im.sdk.net.RequestBody)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 3,
      48, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const RequestBody& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr request_id_;
    ::google::protobuf::internal::ArenaStringPtr url_;
    ::roc::im::sdk::net::FetchMixedLinkMessagesReq* fetch_mixed_link_messages_request_;
    ::roc::im::sdk::net::FetchSingleLinkMessagesReq* fetch_single_link_messages_request_;
    ::roc::im::sdk::net::SendBatchMessageReq* send_batch_messages_request_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_LCModel_2eproto;
};
// -------------------------------------------------------------------

class PushMessages final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:roc.im.sdk.net.PushMessages) */ {
 public:
  inline PushMessages() : PushMessages(nullptr) {}
  ~PushMessages() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(PushMessages* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(PushMessages));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR PushMessages(
      ::google::protobuf::internal::ConstantInitialized);

  inline PushMessages(const PushMessages& from) : PushMessages(nullptr, from) {}
  inline PushMessages(PushMessages&& from) noexcept
      : PushMessages(nullptr, std::move(from)) {}
  inline PushMessages& operator=(const PushMessages& from) {
    CopyFrom(from);
    return *this;
  }
  inline PushMessages& operator=(PushMessages&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PushMessages& default_instance() {
    return *internal_default_instance();
  }
  static inline const PushMessages* internal_default_instance() {
    return reinterpret_cast<const PushMessages*>(
        &_PushMessages_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 13;
  friend void swap(PushMessages& a, PushMessages& b) { a.Swap(&b); }
  inline void Swap(PushMessages* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PushMessages* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PushMessages* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<PushMessages>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PushMessages& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const PushMessages& from) { PushMessages::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(PushMessages* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "roc.im.sdk.net.PushMessages"; }

 protected:
  explicit PushMessages(::google::protobuf::Arena* arena);
  PushMessages(::google::protobuf::Arena* arena, const PushMessages& from);
  PushMessages(::google::protobuf::Arena* arena, PushMessages&& from) noexcept
      : PushMessages(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kPushMessageArrFieldNumber = 1,
  };
  // repeated .roc.im.sdk.net.Message push_message_arr = 1;
  int push_message_arr_size() const;
  private:
  int _internal_push_message_arr_size() const;

  public:
  void clear_push_message_arr() ;
  ::roc::im::sdk::net::Message* mutable_push_message_arr(int index);
  ::google::protobuf::RepeatedPtrField<::roc::im::sdk::net::Message>* mutable_push_message_arr();

  private:
  const ::google::protobuf::RepeatedPtrField<::roc::im::sdk::net::Message>& _internal_push_message_arr() const;
  ::google::protobuf::RepeatedPtrField<::roc::im::sdk::net::Message>* _internal_mutable_push_message_arr();
  public:
  const ::roc::im::sdk::net::Message& push_message_arr(int index) const;
  ::roc::im::sdk::net::Message* add_push_message_arr();
  const ::google::protobuf::RepeatedPtrField<::roc::im::sdk::net::Message>& push_message_arr() const;
  // @@protoc_insertion_point(class_scope:roc.im.sdk.net.PushMessages)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const PushMessages& from_msg);
    ::google::protobuf::RepeatedPtrField< ::roc::im::sdk::net::Message > push_message_arr_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_LCModel_2eproto;
};
// -------------------------------------------------------------------

class ConversationMessages final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:roc.im.sdk.net.ConversationMessages) */ {
 public:
  inline ConversationMessages() : ConversationMessages(nullptr) {}
  ~ConversationMessages() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ConversationMessages* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ConversationMessages));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ConversationMessages(
      ::google::protobuf::internal::ConstantInitialized);

  inline ConversationMessages(const ConversationMessages& from) : ConversationMessages(nullptr, from) {}
  inline ConversationMessages(ConversationMessages&& from) noexcept
      : ConversationMessages(nullptr, std::move(from)) {}
  inline ConversationMessages& operator=(const ConversationMessages& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConversationMessages& operator=(ConversationMessages&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ConversationMessages& default_instance() {
    return *internal_default_instance();
  }
  static inline const ConversationMessages* internal_default_instance() {
    return reinterpret_cast<const ConversationMessages*>(
        &_ConversationMessages_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 6;
  friend void swap(ConversationMessages& a, ConversationMessages& b) { a.Swap(&b); }
  inline void Swap(ConversationMessages* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConversationMessages* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ConversationMessages* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ConversationMessages>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ConversationMessages& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ConversationMessages& from) { ConversationMessages::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ConversationMessages* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "roc.im.sdk.net.ConversationMessages"; }

 protected:
  explicit ConversationMessages(::google::protobuf::Arena* arena);
  ConversationMessages(::google::protobuf::Arena* arena, const ConversationMessages& from);
  ConversationMessages(::google::protobuf::Arena* arena, ConversationMessages&& from) noexcept
      : ConversationMessages(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kMessageArrFieldNumber = 2,
    kConversationIdFieldNumber = 1,
  };
  // repeated .roc.im.sdk.net.Message message_arr = 2;
  int message_arr_size() const;
  private:
  int _internal_message_arr_size() const;

  public:
  void clear_message_arr() ;
  ::roc::im::sdk::net::Message* mutable_message_arr(int index);
  ::google::protobuf::RepeatedPtrField<::roc::im::sdk::net::Message>* mutable_message_arr();

  private:
  const ::google::protobuf::RepeatedPtrField<::roc::im::sdk::net::Message>& _internal_message_arr() const;
  ::google::protobuf::RepeatedPtrField<::roc::im::sdk::net::Message>* _internal_mutable_message_arr();
  public:
  const ::roc::im::sdk::net::Message& message_arr(int index) const;
  ::roc::im::sdk::net::Message* add_message_arr();
  const ::google::protobuf::RepeatedPtrField<::roc::im::sdk::net::Message>& message_arr() const;
  // string conversation_id = 1;
  void clear_conversation_id() ;
  const std::string& conversation_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_conversation_id(Arg_&& arg, Args_... args);
  std::string* mutable_conversation_id();
  PROTOBUF_NODISCARD std::string* release_conversation_id();
  void set_allocated_conversation_id(std::string* value);

  private:
  const std::string& _internal_conversation_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_conversation_id(
      const std::string& value);
  std::string* _internal_mutable_conversation_id();

  public:
  // @@protoc_insertion_point(class_scope:roc.im.sdk.net.ConversationMessages)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      59, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ConversationMessages& from_msg);
    ::google::protobuf::RepeatedPtrField< ::roc::im::sdk::net::Message > message_arr_;
    ::google::protobuf::internal::ArenaStringPtr conversation_id_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_LCModel_2eproto;
};
// -------------------------------------------------------------------

class FetchSingleLinkMessagesResp final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:roc.im.sdk.net.FetchSingleLinkMessagesResp) */ {
 public:
  inline FetchSingleLinkMessagesResp() : FetchSingleLinkMessagesResp(nullptr) {}
  ~FetchSingleLinkMessagesResp() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(FetchSingleLinkMessagesResp* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(FetchSingleLinkMessagesResp));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR FetchSingleLinkMessagesResp(
      ::google::protobuf::internal::ConstantInitialized);

  inline FetchSingleLinkMessagesResp(const FetchSingleLinkMessagesResp& from) : FetchSingleLinkMessagesResp(nullptr, from) {}
  inline FetchSingleLinkMessagesResp(FetchSingleLinkMessagesResp&& from) noexcept
      : FetchSingleLinkMessagesResp(nullptr, std::move(from)) {}
  inline FetchSingleLinkMessagesResp& operator=(const FetchSingleLinkMessagesResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline FetchSingleLinkMessagesResp& operator=(FetchSingleLinkMessagesResp&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FetchSingleLinkMessagesResp& default_instance() {
    return *internal_default_instance();
  }
  static inline const FetchSingleLinkMessagesResp* internal_default_instance() {
    return reinterpret_cast<const FetchSingleLinkMessagesResp*>(
        &_FetchSingleLinkMessagesResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 8;
  friend void swap(FetchSingleLinkMessagesResp& a, FetchSingleLinkMessagesResp& b) { a.Swap(&b); }
  inline void Swap(FetchSingleLinkMessagesResp* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FetchSingleLinkMessagesResp* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FetchSingleLinkMessagesResp* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<FetchSingleLinkMessagesResp>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const FetchSingleLinkMessagesResp& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const FetchSingleLinkMessagesResp& from) { FetchSingleLinkMessagesResp::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(FetchSingleLinkMessagesResp* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "roc.im.sdk.net.FetchSingleLinkMessagesResp"; }

 protected:
  explicit FetchSingleLinkMessagesResp(::google::protobuf::Arena* arena);
  FetchSingleLinkMessagesResp(::google::protobuf::Arena* arena, const FetchSingleLinkMessagesResp& from);
  FetchSingleLinkMessagesResp(::google::protobuf::Arena* arena, FetchSingleLinkMessagesResp&& from) noexcept
      : FetchSingleLinkMessagesResp(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kConversationMessagesFieldNumber = 1,
  };
  // .roc.im.sdk.net.ConversationMessages conversation_messages = 1;
  bool has_conversation_messages() const;
  void clear_conversation_messages() ;
  const ::roc::im::sdk::net::ConversationMessages& conversation_messages() const;
  PROTOBUF_NODISCARD ::roc::im::sdk::net::ConversationMessages* release_conversation_messages();
  ::roc::im::sdk::net::ConversationMessages* mutable_conversation_messages();
  void set_allocated_conversation_messages(::roc::im::sdk::net::ConversationMessages* value);
  void unsafe_arena_set_allocated_conversation_messages(::roc::im::sdk::net::ConversationMessages* value);
  ::roc::im::sdk::net::ConversationMessages* unsafe_arena_release_conversation_messages();

  private:
  const ::roc::im::sdk::net::ConversationMessages& _internal_conversation_messages() const;
  ::roc::im::sdk::net::ConversationMessages* _internal_mutable_conversation_messages();

  public:
  // @@protoc_insertion_point(class_scope:roc.im.sdk.net.FetchSingleLinkMessagesResp)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const FetchSingleLinkMessagesResp& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::roc::im::sdk::net::ConversationMessages* conversation_messages_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_LCModel_2eproto;
};
// -------------------------------------------------------------------

class FetchMixedLinkMessagesResp final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:roc.im.sdk.net.FetchMixedLinkMessagesResp) */ {
 public:
  inline FetchMixedLinkMessagesResp() : FetchMixedLinkMessagesResp(nullptr) {}
  ~FetchMixedLinkMessagesResp() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(FetchMixedLinkMessagesResp* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(FetchMixedLinkMessagesResp));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR FetchMixedLinkMessagesResp(
      ::google::protobuf::internal::ConstantInitialized);

  inline FetchMixedLinkMessagesResp(const FetchMixedLinkMessagesResp& from) : FetchMixedLinkMessagesResp(nullptr, from) {}
  inline FetchMixedLinkMessagesResp(FetchMixedLinkMessagesResp&& from) noexcept
      : FetchMixedLinkMessagesResp(nullptr, std::move(from)) {}
  inline FetchMixedLinkMessagesResp& operator=(const FetchMixedLinkMessagesResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline FetchMixedLinkMessagesResp& operator=(FetchMixedLinkMessagesResp&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FetchMixedLinkMessagesResp& default_instance() {
    return *internal_default_instance();
  }
  static inline const FetchMixedLinkMessagesResp* internal_default_instance() {
    return reinterpret_cast<const FetchMixedLinkMessagesResp*>(
        &_FetchMixedLinkMessagesResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 10;
  friend void swap(FetchMixedLinkMessagesResp& a, FetchMixedLinkMessagesResp& b) { a.Swap(&b); }
  inline void Swap(FetchMixedLinkMessagesResp* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FetchMixedLinkMessagesResp* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FetchMixedLinkMessagesResp* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<FetchMixedLinkMessagesResp>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const FetchMixedLinkMessagesResp& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const FetchMixedLinkMessagesResp& from) { FetchMixedLinkMessagesResp::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(FetchMixedLinkMessagesResp* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "roc.im.sdk.net.FetchMixedLinkMessagesResp"; }

 protected:
  explicit FetchMixedLinkMessagesResp(::google::protobuf::Arena* arena);
  FetchMixedLinkMessagesResp(::google::protobuf::Arena* arena, const FetchMixedLinkMessagesResp& from);
  FetchMixedLinkMessagesResp(::google::protobuf::Arena* arena, FetchMixedLinkMessagesResp&& from) noexcept
      : FetchMixedLinkMessagesResp(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kConversationMessagesFieldNumber = 1,
  };
  // repeated .roc.im.sdk.net.ConversationMessages conversation_messages = 1;
  int conversation_messages_size() const;
  private:
  int _internal_conversation_messages_size() const;

  public:
  void clear_conversation_messages() ;
  ::roc::im::sdk::net::ConversationMessages* mutable_conversation_messages(int index);
  ::google::protobuf::RepeatedPtrField<::roc::im::sdk::net::ConversationMessages>* mutable_conversation_messages();

  private:
  const ::google::protobuf::RepeatedPtrField<::roc::im::sdk::net::ConversationMessages>& _internal_conversation_messages() const;
  ::google::protobuf::RepeatedPtrField<::roc::im::sdk::net::ConversationMessages>* _internal_mutable_conversation_messages();
  public:
  const ::roc::im::sdk::net::ConversationMessages& conversation_messages(int index) const;
  ::roc::im::sdk::net::ConversationMessages* add_conversation_messages();
  const ::google::protobuf::RepeatedPtrField<::roc::im::sdk::net::ConversationMessages>& conversation_messages() const;
  // @@protoc_insertion_point(class_scope:roc.im.sdk.net.FetchMixedLinkMessagesResp)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const FetchMixedLinkMessagesResp& from_msg);
    ::google::protobuf::RepeatedPtrField< ::roc::im::sdk::net::ConversationMessages > conversation_messages_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_LCModel_2eproto;
};
// -------------------------------------------------------------------

class ResponseBody final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:roc.im.sdk.net.ResponseBody) */ {
 public:
  inline ResponseBody() : ResponseBody(nullptr) {}
  ~ResponseBody() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ResponseBody* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ResponseBody));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ResponseBody(
      ::google::protobuf::internal::ConstantInitialized);

  inline ResponseBody(const ResponseBody& from) : ResponseBody(nullptr, from) {}
  inline ResponseBody(ResponseBody&& from) noexcept
      : ResponseBody(nullptr, std::move(from)) {}
  inline ResponseBody& operator=(const ResponseBody& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResponseBody& operator=(ResponseBody&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResponseBody& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResponseBody* internal_default_instance() {
    return reinterpret_cast<const ResponseBody*>(
        &_ResponseBody_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 15;
  friend void swap(ResponseBody& a, ResponseBody& b) { a.Swap(&b); }
  inline void Swap(ResponseBody* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResponseBody* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ResponseBody* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ResponseBody>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ResponseBody& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ResponseBody& from) { ResponseBody::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ResponseBody* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "roc.im.sdk.net.ResponseBody"; }

 protected:
  explicit ResponseBody(::google::protobuf::Arena* arena);
  ResponseBody(::google::protobuf::Arena* arena, const ResponseBody& from);
  ResponseBody(::google::protobuf::Arena* arena, ResponseBody&& from) noexcept
      : ResponseBody(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kResponseIdFieldNumber = 1,
    kFetchMixedLinkMessagesResponseFieldNumber = 2,
    kFetchSingleLinkMessagesResponseFieldNumber = 3,
    kSendBatchMessagesResponseFieldNumber = 4,
    kPushMessagesFieldNumber = 5,
  };
  // string response_id = 1;
  void clear_response_id() ;
  const std::string& response_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_response_id(Arg_&& arg, Args_... args);
  std::string* mutable_response_id();
  PROTOBUF_NODISCARD std::string* release_response_id();
  void set_allocated_response_id(std::string* value);

  private:
  const std::string& _internal_response_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_response_id(
      const std::string& value);
  std::string* _internal_mutable_response_id();

  public:
  // .roc.im.sdk.net.FetchMixedLinkMessagesResp fetch_mixed_link_messages_response = 2;
  bool has_fetch_mixed_link_messages_response() const;
  void clear_fetch_mixed_link_messages_response() ;
  const ::roc::im::sdk::net::FetchMixedLinkMessagesResp& fetch_mixed_link_messages_response() const;
  PROTOBUF_NODISCARD ::roc::im::sdk::net::FetchMixedLinkMessagesResp* release_fetch_mixed_link_messages_response();
  ::roc::im::sdk::net::FetchMixedLinkMessagesResp* mutable_fetch_mixed_link_messages_response();
  void set_allocated_fetch_mixed_link_messages_response(::roc::im::sdk::net::FetchMixedLinkMessagesResp* value);
  void unsafe_arena_set_allocated_fetch_mixed_link_messages_response(::roc::im::sdk::net::FetchMixedLinkMessagesResp* value);
  ::roc::im::sdk::net::FetchMixedLinkMessagesResp* unsafe_arena_release_fetch_mixed_link_messages_response();

  private:
  const ::roc::im::sdk::net::FetchMixedLinkMessagesResp& _internal_fetch_mixed_link_messages_response() const;
  ::roc::im::sdk::net::FetchMixedLinkMessagesResp* _internal_mutable_fetch_mixed_link_messages_response();

  public:
  // .roc.im.sdk.net.FetchSingleLinkMessagesResp fetch_single_link_messages_response = 3;
  bool has_fetch_single_link_messages_response() const;
  void clear_fetch_single_link_messages_response() ;
  const ::roc::im::sdk::net::FetchSingleLinkMessagesResp& fetch_single_link_messages_response() const;
  PROTOBUF_NODISCARD ::roc::im::sdk::net::FetchSingleLinkMessagesResp* release_fetch_single_link_messages_response();
  ::roc::im::sdk::net::FetchSingleLinkMessagesResp* mutable_fetch_single_link_messages_response();
  void set_allocated_fetch_single_link_messages_response(::roc::im::sdk::net::FetchSingleLinkMessagesResp* value);
  void unsafe_arena_set_allocated_fetch_single_link_messages_response(::roc::im::sdk::net::FetchSingleLinkMessagesResp* value);
  ::roc::im::sdk::net::FetchSingleLinkMessagesResp* unsafe_arena_release_fetch_single_link_messages_response();

  private:
  const ::roc::im::sdk::net::FetchSingleLinkMessagesResp& _internal_fetch_single_link_messages_response() const;
  ::roc::im::sdk::net::FetchSingleLinkMessagesResp* _internal_mutable_fetch_single_link_messages_response();

  public:
  // .roc.im.sdk.net.SendBatchMessageResp send_batch_messages_response = 4;
  bool has_send_batch_messages_response() const;
  void clear_send_batch_messages_response() ;
  const ::roc::im::sdk::net::SendBatchMessageResp& send_batch_messages_response() const;
  PROTOBUF_NODISCARD ::roc::im::sdk::net::SendBatchMessageResp* release_send_batch_messages_response();
  ::roc::im::sdk::net::SendBatchMessageResp* mutable_send_batch_messages_response();
  void set_allocated_send_batch_messages_response(::roc::im::sdk::net::SendBatchMessageResp* value);
  void unsafe_arena_set_allocated_send_batch_messages_response(::roc::im::sdk::net::SendBatchMessageResp* value);
  ::roc::im::sdk::net::SendBatchMessageResp* unsafe_arena_release_send_batch_messages_response();

  private:
  const ::roc::im::sdk::net::SendBatchMessageResp& _internal_send_batch_messages_response() const;
  ::roc::im::sdk::net::SendBatchMessageResp* _internal_mutable_send_batch_messages_response();

  public:
  // .roc.im.sdk.net.PushMessages push_messages = 5;
  bool has_push_messages() const;
  void clear_push_messages() ;
  const ::roc::im::sdk::net::PushMessages& push_messages() const;
  PROTOBUF_NODISCARD ::roc::im::sdk::net::PushMessages* release_push_messages();
  ::roc::im::sdk::net::PushMessages* mutable_push_messages();
  void set_allocated_push_messages(::roc::im::sdk::net::PushMessages* value);
  void unsafe_arena_set_allocated_push_messages(::roc::im::sdk::net::PushMessages* value);
  ::roc::im::sdk::net::PushMessages* unsafe_arena_release_push_messages();

  private:
  const ::roc::im::sdk::net::PushMessages& _internal_push_messages() const;
  ::roc::im::sdk::net::PushMessages* _internal_mutable_push_messages();

  public:
  // @@protoc_insertion_point(class_scope:roc.im.sdk.net.ResponseBody)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 4,
      47, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ResponseBody& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr response_id_;
    ::roc::im::sdk::net::FetchMixedLinkMessagesResp* fetch_mixed_link_messages_response_;
    ::roc::im::sdk::net::FetchSingleLinkMessagesResp* fetch_single_link_messages_response_;
    ::roc::im::sdk::net::SendBatchMessageResp* send_batch_messages_response_;
    ::roc::im::sdk::net::PushMessages* push_messages_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_LCModel_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Conversation

// string convertsion_id = 1;
inline void Conversation::clear_convertsion_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.convertsion_id_.ClearToEmpty();
}
inline const std::string& Conversation::convertsion_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:roc.im.sdk.net.Conversation.convertsion_id)
  return _internal_convertsion_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Conversation::set_convertsion_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.convertsion_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:roc.im.sdk.net.Conversation.convertsion_id)
}
inline std::string* Conversation::mutable_convertsion_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_convertsion_id();
  // @@protoc_insertion_point(field_mutable:roc.im.sdk.net.Conversation.convertsion_id)
  return _s;
}
inline const std::string& Conversation::_internal_convertsion_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.convertsion_id_.Get();
}
inline void Conversation::_internal_set_convertsion_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.convertsion_id_.Set(value, GetArena());
}
inline std::string* Conversation::_internal_mutable_convertsion_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.convertsion_id_.Mutable( GetArena());
}
inline std::string* Conversation::release_convertsion_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:roc.im.sdk.net.Conversation.convertsion_id)
  return _impl_.convertsion_id_.Release();
}
inline void Conversation::set_allocated_convertsion_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.convertsion_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.convertsion_id_.IsDefault()) {
    _impl_.convertsion_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:roc.im.sdk.net.Conversation.convertsion_id)
}

// string owner_id = 2;
inline void Conversation::clear_owner_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.owner_id_.ClearToEmpty();
}
inline const std::string& Conversation::owner_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:roc.im.sdk.net.Conversation.owner_id)
  return _internal_owner_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Conversation::set_owner_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.owner_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:roc.im.sdk.net.Conversation.owner_id)
}
inline std::string* Conversation::mutable_owner_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_owner_id();
  // @@protoc_insertion_point(field_mutable:roc.im.sdk.net.Conversation.owner_id)
  return _s;
}
inline const std::string& Conversation::_internal_owner_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.owner_id_.Get();
}
inline void Conversation::_internal_set_owner_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.owner_id_.Set(value, GetArena());
}
inline std::string* Conversation::_internal_mutable_owner_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.owner_id_.Mutable( GetArena());
}
inline std::string* Conversation::release_owner_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:roc.im.sdk.net.Conversation.owner_id)
  return _impl_.owner_id_.Release();
}
inline void Conversation::set_allocated_owner_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.owner_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.owner_id_.IsDefault()) {
    _impl_.owner_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:roc.im.sdk.net.Conversation.owner_id)
}

// map<string, string> ext = 3;
inline int Conversation::_internal_ext_size() const {
  return _internal_ext().size();
}
inline int Conversation::ext_size() const {
  return _internal_ext_size();
}
inline void Conversation::clear_ext() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ext_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& Conversation::_internal_ext() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.ext_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& Conversation::ext() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:roc.im.sdk.net.Conversation.ext)
  return _internal_ext();
}
inline ::google::protobuf::Map<std::string, std::string>* Conversation::_internal_mutable_ext() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.ext_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* Conversation::mutable_ext() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:roc.im.sdk.net.Conversation.ext)
  return _internal_mutable_ext();
}

// -------------------------------------------------------------------

// CmdMessage

// int64 cmd = 1;
inline void CmdMessage::clear_cmd() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.cmd_ = ::int64_t{0};
}
inline ::int64_t CmdMessage::cmd() const {
  // @@protoc_insertion_point(field_get:roc.im.sdk.net.CmdMessage.cmd)
  return _internal_cmd();
}
inline void CmdMessage::set_cmd(::int64_t value) {
  _internal_set_cmd(value);
  // @@protoc_insertion_point(field_set:roc.im.sdk.net.CmdMessage.cmd)
}
inline ::int64_t CmdMessage::_internal_cmd() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.cmd_;
}
inline void CmdMessage::_internal_set_cmd(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.cmd_ = value;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// ContentMessage

// string message_id = 1;
inline void ContentMessage::clear_message_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_id_.ClearToEmpty();
}
inline const std::string& ContentMessage::message_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:roc.im.sdk.net.ContentMessage.message_id)
  return _internal_message_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ContentMessage::set_message_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:roc.im.sdk.net.ContentMessage.message_id)
}
inline std::string* ContentMessage::mutable_message_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_message_id();
  // @@protoc_insertion_point(field_mutable:roc.im.sdk.net.ContentMessage.message_id)
  return _s;
}
inline const std::string& ContentMessage::_internal_message_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.message_id_.Get();
}
inline void ContentMessage::_internal_set_message_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_id_.Set(value, GetArena());
}
inline std::string* ContentMessage::_internal_mutable_message_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.message_id_.Mutable( GetArena());
}
inline std::string* ContentMessage::release_message_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:roc.im.sdk.net.ContentMessage.message_id)
  return _impl_.message_id_.Release();
}
inline void ContentMessage::set_allocated_message_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.message_id_.IsDefault()) {
    _impl_.message_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:roc.im.sdk.net.ContentMessage.message_id)
}

// bytes content = 2;
inline void ContentMessage::clear_content() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.content_.ClearToEmpty();
}
inline const std::string& ContentMessage::content() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:roc.im.sdk.net.ContentMessage.content)
  return _internal_content();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ContentMessage::set_content(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.content_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:roc.im.sdk.net.ContentMessage.content)
}
inline std::string* ContentMessage::mutable_content() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_content();
  // @@protoc_insertion_point(field_mutable:roc.im.sdk.net.ContentMessage.content)
  return _s;
}
inline const std::string& ContentMessage::_internal_content() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.content_.Get();
}
inline void ContentMessage::_internal_set_content(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.content_.Set(value, GetArena());
}
inline std::string* ContentMessage::_internal_mutable_content() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.content_.Mutable( GetArena());
}
inline std::string* ContentMessage::release_content() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:roc.im.sdk.net.ContentMessage.content)
  return _impl_.content_.Release();
}
inline void ContentMessage::set_allocated_content(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.content_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.content_.IsDefault()) {
    _impl_.content_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:roc.im.sdk.net.ContentMessage.content)
}

// map<string, string> ext = 3;
inline int ContentMessage::_internal_ext_size() const {
  return _internal_ext().size();
}
inline int ContentMessage::ext_size() const {
  return _internal_ext_size();
}
inline void ContentMessage::clear_ext() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ext_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& ContentMessage::_internal_ext() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.ext_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& ContentMessage::ext() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:roc.im.sdk.net.ContentMessage.ext)
  return _internal_ext();
}
inline ::google::protobuf::Map<std::string, std::string>* ContentMessage::_internal_mutable_ext() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.ext_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* ContentMessage::mutable_ext() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:roc.im.sdk.net.ContentMessage.ext)
  return _internal_mutable_ext();
}

// string sender_id = 4;
inline void ContentMessage::clear_sender_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sender_id_.ClearToEmpty();
}
inline const std::string& ContentMessage::sender_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:roc.im.sdk.net.ContentMessage.sender_id)
  return _internal_sender_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ContentMessage::set_sender_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sender_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:roc.im.sdk.net.ContentMessage.sender_id)
}
inline std::string* ContentMessage::mutable_sender_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_sender_id();
  // @@protoc_insertion_point(field_mutable:roc.im.sdk.net.ContentMessage.sender_id)
  return _s;
}
inline const std::string& ContentMessage::_internal_sender_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.sender_id_.Get();
}
inline void ContentMessage::_internal_set_sender_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sender_id_.Set(value, GetArena());
}
inline std::string* ContentMessage::_internal_mutable_sender_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.sender_id_.Mutable( GetArena());
}
inline std::string* ContentMessage::release_sender_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:roc.im.sdk.net.ContentMessage.sender_id)
  return _impl_.sender_id_.Release();
}
inline void ContentMessage::set_allocated_sender_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sender_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.sender_id_.IsDefault()) {
    _impl_.sender_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:roc.im.sdk.net.ContentMessage.sender_id)
}

// string convertsion_id = 5;
inline void ContentMessage::clear_convertsion_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.convertsion_id_.ClearToEmpty();
}
inline const std::string& ContentMessage::convertsion_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:roc.im.sdk.net.ContentMessage.convertsion_id)
  return _internal_convertsion_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ContentMessage::set_convertsion_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.convertsion_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:roc.im.sdk.net.ContentMessage.convertsion_id)
}
inline std::string* ContentMessage::mutable_convertsion_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_convertsion_id();
  // @@protoc_insertion_point(field_mutable:roc.im.sdk.net.ContentMessage.convertsion_id)
  return _s;
}
inline const std::string& ContentMessage::_internal_convertsion_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.convertsion_id_.Get();
}
inline void ContentMessage::_internal_set_convertsion_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.convertsion_id_.Set(value, GetArena());
}
inline std::string* ContentMessage::_internal_mutable_convertsion_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.convertsion_id_.Mutable( GetArena());
}
inline std::string* ContentMessage::release_convertsion_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:roc.im.sdk.net.ContentMessage.convertsion_id)
  return _impl_.convertsion_id_.Release();
}
inline void ContentMessage::set_allocated_convertsion_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.convertsion_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.convertsion_id_.IsDefault()) {
    _impl_.convertsion_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:roc.im.sdk.net.ContentMessage.convertsion_id)
}

// int64 message_type = 6;
inline void ContentMessage::clear_message_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_type_ = ::int64_t{0};
}
inline ::int64_t ContentMessage::message_type() const {
  // @@protoc_insertion_point(field_get:roc.im.sdk.net.ContentMessage.message_type)
  return _internal_message_type();
}
inline void ContentMessage::set_message_type(::int64_t value) {
  _internal_set_message_type(value);
  // @@protoc_insertion_point(field_set:roc.im.sdk.net.ContentMessage.message_type)
}
inline ::int64_t ContentMessage::_internal_message_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.message_type_;
}
inline void ContentMessage::_internal_set_message_type(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_type_ = value;
}

// int64 index = 7;
inline void ContentMessage::clear_index() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.index_ = ::int64_t{0};
}
inline ::int64_t ContentMessage::index() const {
  // @@protoc_insertion_point(field_get:roc.im.sdk.net.ContentMessage.index)
  return _internal_index();
}
inline void ContentMessage::set_index(::int64_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:roc.im.sdk.net.ContentMessage.index)
}
inline ::int64_t ContentMessage::_internal_index() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.index_;
}
inline void ContentMessage::_internal_set_index(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.index_ = value;
}

// -------------------------------------------------------------------

// Message

// bool isCmd = 1;
inline void Message::clear_iscmd() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.iscmd_ = false;
}
inline bool Message::iscmd() const {
  // @@protoc_insertion_point(field_get:roc.im.sdk.net.Message.isCmd)
  return _internal_iscmd();
}
inline void Message::set_iscmd(bool value) {
  _internal_set_iscmd(value);
  // @@protoc_insertion_point(field_set:roc.im.sdk.net.Message.isCmd)
}
inline bool Message::_internal_iscmd() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.iscmd_;
}
inline void Message::_internal_set_iscmd(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.iscmd_ = value;
}

// .roc.im.sdk.net.CmdMessage cmdMessage = 2;
inline bool Message::has_cmdmessage() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.cmdmessage_ != nullptr);
  return value;
}
inline void Message::clear_cmdmessage() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.cmdmessage_ != nullptr) _impl_.cmdmessage_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::roc::im::sdk::net::CmdMessage& Message::_internal_cmdmessage() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::roc::im::sdk::net::CmdMessage* p = _impl_.cmdmessage_;
  return p != nullptr ? *p : reinterpret_cast<const ::roc::im::sdk::net::CmdMessage&>(::roc::im::sdk::net::_CmdMessage_default_instance_);
}
inline const ::roc::im::sdk::net::CmdMessage& Message::cmdmessage() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:roc.im.sdk.net.Message.cmdMessage)
  return _internal_cmdmessage();
}
inline void Message::unsafe_arena_set_allocated_cmdmessage(::roc::im::sdk::net::CmdMessage* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.cmdmessage_);
  }
  _impl_.cmdmessage_ = reinterpret_cast<::roc::im::sdk::net::CmdMessage*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:roc.im.sdk.net.Message.cmdMessage)
}
inline ::roc::im::sdk::net::CmdMessage* Message::release_cmdmessage() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::roc::im::sdk::net::CmdMessage* released = _impl_.cmdmessage_;
  _impl_.cmdmessage_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::roc::im::sdk::net::CmdMessage* Message::unsafe_arena_release_cmdmessage() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:roc.im.sdk.net.Message.cmdMessage)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::roc::im::sdk::net::CmdMessage* temp = _impl_.cmdmessage_;
  _impl_.cmdmessage_ = nullptr;
  return temp;
}
inline ::roc::im::sdk::net::CmdMessage* Message::_internal_mutable_cmdmessage() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.cmdmessage_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::roc::im::sdk::net::CmdMessage>(GetArena());
    _impl_.cmdmessage_ = reinterpret_cast<::roc::im::sdk::net::CmdMessage*>(p);
  }
  return _impl_.cmdmessage_;
}
inline ::roc::im::sdk::net::CmdMessage* Message::mutable_cmdmessage() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::roc::im::sdk::net::CmdMessage* _msg = _internal_mutable_cmdmessage();
  // @@protoc_insertion_point(field_mutable:roc.im.sdk.net.Message.cmdMessage)
  return _msg;
}
inline void Message::set_allocated_cmdmessage(::roc::im::sdk::net::CmdMessage* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.cmdmessage_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.cmdmessage_ = reinterpret_cast<::roc::im::sdk::net::CmdMessage*>(value);
  // @@protoc_insertion_point(field_set_allocated:roc.im.sdk.net.Message.cmdMessage)
}

// .roc.im.sdk.net.ContentMessage contentMessage = 3;
inline bool Message::has_contentmessage() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.contentmessage_ != nullptr);
  return value;
}
inline void Message::clear_contentmessage() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.contentmessage_ != nullptr) _impl_.contentmessage_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::roc::im::sdk::net::ContentMessage& Message::_internal_contentmessage() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::roc::im::sdk::net::ContentMessage* p = _impl_.contentmessage_;
  return p != nullptr ? *p : reinterpret_cast<const ::roc::im::sdk::net::ContentMessage&>(::roc::im::sdk::net::_ContentMessage_default_instance_);
}
inline const ::roc::im::sdk::net::ContentMessage& Message::contentmessage() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:roc.im.sdk.net.Message.contentMessage)
  return _internal_contentmessage();
}
inline void Message::unsafe_arena_set_allocated_contentmessage(::roc::im::sdk::net::ContentMessage* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.contentmessage_);
  }
  _impl_.contentmessage_ = reinterpret_cast<::roc::im::sdk::net::ContentMessage*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:roc.im.sdk.net.Message.contentMessage)
}
inline ::roc::im::sdk::net::ContentMessage* Message::release_contentmessage() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::roc::im::sdk::net::ContentMessage* released = _impl_.contentmessage_;
  _impl_.contentmessage_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::roc::im::sdk::net::ContentMessage* Message::unsafe_arena_release_contentmessage() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:roc.im.sdk.net.Message.contentMessage)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::roc::im::sdk::net::ContentMessage* temp = _impl_.contentmessage_;
  _impl_.contentmessage_ = nullptr;
  return temp;
}
inline ::roc::im::sdk::net::ContentMessage* Message::_internal_mutable_contentmessage() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.contentmessage_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::roc::im::sdk::net::ContentMessage>(GetArena());
    _impl_.contentmessage_ = reinterpret_cast<::roc::im::sdk::net::ContentMessage*>(p);
  }
  return _impl_.contentmessage_;
}
inline ::roc::im::sdk::net::ContentMessage* Message::mutable_contentmessage() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::roc::im::sdk::net::ContentMessage* _msg = _internal_mutable_contentmessage();
  // @@protoc_insertion_point(field_mutable:roc.im.sdk.net.Message.contentMessage)
  return _msg;
}
inline void Message::set_allocated_contentmessage(::roc::im::sdk::net::ContentMessage* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.contentmessage_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.contentmessage_ = reinterpret_cast<::roc::im::sdk::net::ContentMessage*>(value);
  // @@protoc_insertion_point(field_set_allocated:roc.im.sdk.net.Message.contentMessage)
}

// -------------------------------------------------------------------

// ConversationMessages

// string conversation_id = 1;
inline void ConversationMessages::clear_conversation_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.conversation_id_.ClearToEmpty();
}
inline const std::string& ConversationMessages::conversation_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:roc.im.sdk.net.ConversationMessages.conversation_id)
  return _internal_conversation_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ConversationMessages::set_conversation_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.conversation_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:roc.im.sdk.net.ConversationMessages.conversation_id)
}
inline std::string* ConversationMessages::mutable_conversation_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_conversation_id();
  // @@protoc_insertion_point(field_mutable:roc.im.sdk.net.ConversationMessages.conversation_id)
  return _s;
}
inline const std::string& ConversationMessages::_internal_conversation_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.conversation_id_.Get();
}
inline void ConversationMessages::_internal_set_conversation_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.conversation_id_.Set(value, GetArena());
}
inline std::string* ConversationMessages::_internal_mutable_conversation_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.conversation_id_.Mutable( GetArena());
}
inline std::string* ConversationMessages::release_conversation_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:roc.im.sdk.net.ConversationMessages.conversation_id)
  return _impl_.conversation_id_.Release();
}
inline void ConversationMessages::set_allocated_conversation_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.conversation_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.conversation_id_.IsDefault()) {
    _impl_.conversation_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:roc.im.sdk.net.ConversationMessages.conversation_id)
}

// repeated .roc.im.sdk.net.Message message_arr = 2;
inline int ConversationMessages::_internal_message_arr_size() const {
  return _internal_message_arr().size();
}
inline int ConversationMessages::message_arr_size() const {
  return _internal_message_arr_size();
}
inline void ConversationMessages::clear_message_arr() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_arr_.Clear();
}
inline ::roc::im::sdk::net::Message* ConversationMessages::mutable_message_arr(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:roc.im.sdk.net.ConversationMessages.message_arr)
  return _internal_mutable_message_arr()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::roc::im::sdk::net::Message>* ConversationMessages::mutable_message_arr()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:roc.im.sdk.net.ConversationMessages.message_arr)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_message_arr();
}
inline const ::roc::im::sdk::net::Message& ConversationMessages::message_arr(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:roc.im.sdk.net.ConversationMessages.message_arr)
  return _internal_message_arr().Get(index);
}
inline ::roc::im::sdk::net::Message* ConversationMessages::add_message_arr() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::roc::im::sdk::net::Message* _add = _internal_mutable_message_arr()->Add();
  // @@protoc_insertion_point(field_add:roc.im.sdk.net.ConversationMessages.message_arr)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::roc::im::sdk::net::Message>& ConversationMessages::message_arr() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:roc.im.sdk.net.ConversationMessages.message_arr)
  return _internal_message_arr();
}
inline const ::google::protobuf::RepeatedPtrField<::roc::im::sdk::net::Message>&
ConversationMessages::_internal_message_arr() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.message_arr_;
}
inline ::google::protobuf::RepeatedPtrField<::roc::im::sdk::net::Message>*
ConversationMessages::_internal_mutable_message_arr() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.message_arr_;
}

// -------------------------------------------------------------------

// FetchSingleLinkMessagesReq

// string conversation_id = 1;
inline void FetchSingleLinkMessagesReq::clear_conversation_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.conversation_id_.ClearToEmpty();
}
inline const std::string& FetchSingleLinkMessagesReq::conversation_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:roc.im.sdk.net.FetchSingleLinkMessagesReq.conversation_id)
  return _internal_conversation_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void FetchSingleLinkMessagesReq::set_conversation_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.conversation_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:roc.im.sdk.net.FetchSingleLinkMessagesReq.conversation_id)
}
inline std::string* FetchSingleLinkMessagesReq::mutable_conversation_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_conversation_id();
  // @@protoc_insertion_point(field_mutable:roc.im.sdk.net.FetchSingleLinkMessagesReq.conversation_id)
  return _s;
}
inline const std::string& FetchSingleLinkMessagesReq::_internal_conversation_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.conversation_id_.Get();
}
inline void FetchSingleLinkMessagesReq::_internal_set_conversation_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.conversation_id_.Set(value, GetArena());
}
inline std::string* FetchSingleLinkMessagesReq::_internal_mutable_conversation_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.conversation_id_.Mutable( GetArena());
}
inline std::string* FetchSingleLinkMessagesReq::release_conversation_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:roc.im.sdk.net.FetchSingleLinkMessagesReq.conversation_id)
  return _impl_.conversation_id_.Release();
}
inline void FetchSingleLinkMessagesReq::set_allocated_conversation_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.conversation_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.conversation_id_.IsDefault()) {
    _impl_.conversation_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:roc.im.sdk.net.FetchSingleLinkMessagesReq.conversation_id)
}

// int64 from_index = 2;
inline void FetchSingleLinkMessagesReq::clear_from_index() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.from_index_ = ::int64_t{0};
}
inline ::int64_t FetchSingleLinkMessagesReq::from_index() const {
  // @@protoc_insertion_point(field_get:roc.im.sdk.net.FetchSingleLinkMessagesReq.from_index)
  return _internal_from_index();
}
inline void FetchSingleLinkMessagesReq::set_from_index(::int64_t value) {
  _internal_set_from_index(value);
  // @@protoc_insertion_point(field_set:roc.im.sdk.net.FetchSingleLinkMessagesReq.from_index)
}
inline ::int64_t FetchSingleLinkMessagesReq::_internal_from_index() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.from_index_;
}
inline void FetchSingleLinkMessagesReq::_internal_set_from_index(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.from_index_ = value;
}

// int64 to_index = 3;
inline void FetchSingleLinkMessagesReq::clear_to_index() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.to_index_ = ::int64_t{0};
}
inline ::int64_t FetchSingleLinkMessagesReq::to_index() const {
  // @@protoc_insertion_point(field_get:roc.im.sdk.net.FetchSingleLinkMessagesReq.to_index)
  return _internal_to_index();
}
inline void FetchSingleLinkMessagesReq::set_to_index(::int64_t value) {
  _internal_set_to_index(value);
  // @@protoc_insertion_point(field_set:roc.im.sdk.net.FetchSingleLinkMessagesReq.to_index)
}
inline ::int64_t FetchSingleLinkMessagesReq::_internal_to_index() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.to_index_;
}
inline void FetchSingleLinkMessagesReq::_internal_set_to_index(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.to_index_ = value;
}

// -------------------------------------------------------------------

// FetchSingleLinkMessagesResp

// .roc.im.sdk.net.ConversationMessages conversation_messages = 1;
inline bool FetchSingleLinkMessagesResp::has_conversation_messages() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.conversation_messages_ != nullptr);
  return value;
}
inline void FetchSingleLinkMessagesResp::clear_conversation_messages() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.conversation_messages_ != nullptr) _impl_.conversation_messages_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::roc::im::sdk::net::ConversationMessages& FetchSingleLinkMessagesResp::_internal_conversation_messages() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::roc::im::sdk::net::ConversationMessages* p = _impl_.conversation_messages_;
  return p != nullptr ? *p : reinterpret_cast<const ::roc::im::sdk::net::ConversationMessages&>(::roc::im::sdk::net::_ConversationMessages_default_instance_);
}
inline const ::roc::im::sdk::net::ConversationMessages& FetchSingleLinkMessagesResp::conversation_messages() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:roc.im.sdk.net.FetchSingleLinkMessagesResp.conversation_messages)
  return _internal_conversation_messages();
}
inline void FetchSingleLinkMessagesResp::unsafe_arena_set_allocated_conversation_messages(::roc::im::sdk::net::ConversationMessages* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.conversation_messages_);
  }
  _impl_.conversation_messages_ = reinterpret_cast<::roc::im::sdk::net::ConversationMessages*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:roc.im.sdk.net.FetchSingleLinkMessagesResp.conversation_messages)
}
inline ::roc::im::sdk::net::ConversationMessages* FetchSingleLinkMessagesResp::release_conversation_messages() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::roc::im::sdk::net::ConversationMessages* released = _impl_.conversation_messages_;
  _impl_.conversation_messages_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::roc::im::sdk::net::ConversationMessages* FetchSingleLinkMessagesResp::unsafe_arena_release_conversation_messages() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:roc.im.sdk.net.FetchSingleLinkMessagesResp.conversation_messages)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::roc::im::sdk::net::ConversationMessages* temp = _impl_.conversation_messages_;
  _impl_.conversation_messages_ = nullptr;
  return temp;
}
inline ::roc::im::sdk::net::ConversationMessages* FetchSingleLinkMessagesResp::_internal_mutable_conversation_messages() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.conversation_messages_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::roc::im::sdk::net::ConversationMessages>(GetArena());
    _impl_.conversation_messages_ = reinterpret_cast<::roc::im::sdk::net::ConversationMessages*>(p);
  }
  return _impl_.conversation_messages_;
}
inline ::roc::im::sdk::net::ConversationMessages* FetchSingleLinkMessagesResp::mutable_conversation_messages() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::roc::im::sdk::net::ConversationMessages* _msg = _internal_mutable_conversation_messages();
  // @@protoc_insertion_point(field_mutable:roc.im.sdk.net.FetchSingleLinkMessagesResp.conversation_messages)
  return _msg;
}
inline void FetchSingleLinkMessagesResp::set_allocated_conversation_messages(::roc::im::sdk::net::ConversationMessages* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.conversation_messages_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.conversation_messages_ = reinterpret_cast<::roc::im::sdk::net::ConversationMessages*>(value);
  // @@protoc_insertion_point(field_set_allocated:roc.im.sdk.net.FetchSingleLinkMessagesResp.conversation_messages)
}

// -------------------------------------------------------------------

// FetchMixedLinkMessagesReq

// repeated string conversation_id_arr = 1;
inline int FetchMixedLinkMessagesReq::_internal_conversation_id_arr_size() const {
  return _internal_conversation_id_arr().size();
}
inline int FetchMixedLinkMessagesReq::conversation_id_arr_size() const {
  return _internal_conversation_id_arr_size();
}
inline void FetchMixedLinkMessagesReq::clear_conversation_id_arr() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.conversation_id_arr_.Clear();
}
inline std::string* FetchMixedLinkMessagesReq::add_conversation_id_arr() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_conversation_id_arr()->Add();
  // @@protoc_insertion_point(field_add_mutable:roc.im.sdk.net.FetchMixedLinkMessagesReq.conversation_id_arr)
  return _s;
}
inline const std::string& FetchMixedLinkMessagesReq::conversation_id_arr(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:roc.im.sdk.net.FetchMixedLinkMessagesReq.conversation_id_arr)
  return _internal_conversation_id_arr().Get(index);
}
inline std::string* FetchMixedLinkMessagesReq::mutable_conversation_id_arr(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:roc.im.sdk.net.FetchMixedLinkMessagesReq.conversation_id_arr)
  return _internal_mutable_conversation_id_arr()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void FetchMixedLinkMessagesReq::set_conversation_id_arr(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_conversation_id_arr()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:roc.im.sdk.net.FetchMixedLinkMessagesReq.conversation_id_arr)
}
template <typename Arg_, typename... Args_>
inline void FetchMixedLinkMessagesReq::add_conversation_id_arr(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_conversation_id_arr(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:roc.im.sdk.net.FetchMixedLinkMessagesReq.conversation_id_arr)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
FetchMixedLinkMessagesReq::conversation_id_arr() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:roc.im.sdk.net.FetchMixedLinkMessagesReq.conversation_id_arr)
  return _internal_conversation_id_arr();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
FetchMixedLinkMessagesReq::mutable_conversation_id_arr() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:roc.im.sdk.net.FetchMixedLinkMessagesReq.conversation_id_arr)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_conversation_id_arr();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
FetchMixedLinkMessagesReq::_internal_conversation_id_arr() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.conversation_id_arr_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
FetchMixedLinkMessagesReq::_internal_mutable_conversation_id_arr() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.conversation_id_arr_;
}

// int64 count = 2;
inline void FetchMixedLinkMessagesReq::clear_count() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.count_ = ::int64_t{0};
}
inline ::int64_t FetchMixedLinkMessagesReq::count() const {
  // @@protoc_insertion_point(field_get:roc.im.sdk.net.FetchMixedLinkMessagesReq.count)
  return _internal_count();
}
inline void FetchMixedLinkMessagesReq::set_count(::int64_t value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:roc.im.sdk.net.FetchMixedLinkMessagesReq.count)
}
inline ::int64_t FetchMixedLinkMessagesReq::_internal_count() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.count_;
}
inline void FetchMixedLinkMessagesReq::_internal_set_count(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.count_ = value;
}

// -------------------------------------------------------------------

// FetchMixedLinkMessagesResp

// repeated .roc.im.sdk.net.ConversationMessages conversation_messages = 1;
inline int FetchMixedLinkMessagesResp::_internal_conversation_messages_size() const {
  return _internal_conversation_messages().size();
}
inline int FetchMixedLinkMessagesResp::conversation_messages_size() const {
  return _internal_conversation_messages_size();
}
inline void FetchMixedLinkMessagesResp::clear_conversation_messages() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.conversation_messages_.Clear();
}
inline ::roc::im::sdk::net::ConversationMessages* FetchMixedLinkMessagesResp::mutable_conversation_messages(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:roc.im.sdk.net.FetchMixedLinkMessagesResp.conversation_messages)
  return _internal_mutable_conversation_messages()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::roc::im::sdk::net::ConversationMessages>* FetchMixedLinkMessagesResp::mutable_conversation_messages()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:roc.im.sdk.net.FetchMixedLinkMessagesResp.conversation_messages)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_conversation_messages();
}
inline const ::roc::im::sdk::net::ConversationMessages& FetchMixedLinkMessagesResp::conversation_messages(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:roc.im.sdk.net.FetchMixedLinkMessagesResp.conversation_messages)
  return _internal_conversation_messages().Get(index);
}
inline ::roc::im::sdk::net::ConversationMessages* FetchMixedLinkMessagesResp::add_conversation_messages() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::roc::im::sdk::net::ConversationMessages* _add = _internal_mutable_conversation_messages()->Add();
  // @@protoc_insertion_point(field_add:roc.im.sdk.net.FetchMixedLinkMessagesResp.conversation_messages)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::roc::im::sdk::net::ConversationMessages>& FetchMixedLinkMessagesResp::conversation_messages() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:roc.im.sdk.net.FetchMixedLinkMessagesResp.conversation_messages)
  return _internal_conversation_messages();
}
inline const ::google::protobuf::RepeatedPtrField<::roc::im::sdk::net::ConversationMessages>&
FetchMixedLinkMessagesResp::_internal_conversation_messages() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.conversation_messages_;
}
inline ::google::protobuf::RepeatedPtrField<::roc::im::sdk::net::ConversationMessages>*
FetchMixedLinkMessagesResp::_internal_mutable_conversation_messages() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.conversation_messages_;
}

// -------------------------------------------------------------------

// SendBatchMessageReq

// repeated .roc.im.sdk.net.ContentMessage message_arr = 1;
inline int SendBatchMessageReq::_internal_message_arr_size() const {
  return _internal_message_arr().size();
}
inline int SendBatchMessageReq::message_arr_size() const {
  return _internal_message_arr_size();
}
inline void SendBatchMessageReq::clear_message_arr() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_arr_.Clear();
}
inline ::roc::im::sdk::net::ContentMessage* SendBatchMessageReq::mutable_message_arr(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:roc.im.sdk.net.SendBatchMessageReq.message_arr)
  return _internal_mutable_message_arr()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::roc::im::sdk::net::ContentMessage>* SendBatchMessageReq::mutable_message_arr()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:roc.im.sdk.net.SendBatchMessageReq.message_arr)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_message_arr();
}
inline const ::roc::im::sdk::net::ContentMessage& SendBatchMessageReq::message_arr(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:roc.im.sdk.net.SendBatchMessageReq.message_arr)
  return _internal_message_arr().Get(index);
}
inline ::roc::im::sdk::net::ContentMessage* SendBatchMessageReq::add_message_arr() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::roc::im::sdk::net::ContentMessage* _add = _internal_mutable_message_arr()->Add();
  // @@protoc_insertion_point(field_add:roc.im.sdk.net.SendBatchMessageReq.message_arr)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::roc::im::sdk::net::ContentMessage>& SendBatchMessageReq::message_arr() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:roc.im.sdk.net.SendBatchMessageReq.message_arr)
  return _internal_message_arr();
}
inline const ::google::protobuf::RepeatedPtrField<::roc::im::sdk::net::ContentMessage>&
SendBatchMessageReq::_internal_message_arr() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.message_arr_;
}
inline ::google::protobuf::RepeatedPtrField<::roc::im::sdk::net::ContentMessage>*
SendBatchMessageReq::_internal_mutable_message_arr() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.message_arr_;
}

// -------------------------------------------------------------------

// SendBatchMessageResp

// repeated .roc.im.sdk.net.SendBatchMessageResp send_message_response_arr = 1;
inline int SendBatchMessageResp::_internal_send_message_response_arr_size() const {
  return _internal_send_message_response_arr().size();
}
inline int SendBatchMessageResp::send_message_response_arr_size() const {
  return _internal_send_message_response_arr_size();
}
inline void SendBatchMessageResp::clear_send_message_response_arr() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.send_message_response_arr_.Clear();
}
inline ::roc::im::sdk::net::SendBatchMessageResp* SendBatchMessageResp::mutable_send_message_response_arr(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:roc.im.sdk.net.SendBatchMessageResp.send_message_response_arr)
  return _internal_mutable_send_message_response_arr()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::roc::im::sdk::net::SendBatchMessageResp>* SendBatchMessageResp::mutable_send_message_response_arr()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:roc.im.sdk.net.SendBatchMessageResp.send_message_response_arr)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_send_message_response_arr();
}
inline const ::roc::im::sdk::net::SendBatchMessageResp& SendBatchMessageResp::send_message_response_arr(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:roc.im.sdk.net.SendBatchMessageResp.send_message_response_arr)
  return _internal_send_message_response_arr().Get(index);
}
inline ::roc::im::sdk::net::SendBatchMessageResp* SendBatchMessageResp::add_send_message_response_arr() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::roc::im::sdk::net::SendBatchMessageResp* _add = _internal_mutable_send_message_response_arr()->Add();
  // @@protoc_insertion_point(field_add:roc.im.sdk.net.SendBatchMessageResp.send_message_response_arr)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::roc::im::sdk::net::SendBatchMessageResp>& SendBatchMessageResp::send_message_response_arr() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:roc.im.sdk.net.SendBatchMessageResp.send_message_response_arr)
  return _internal_send_message_response_arr();
}
inline const ::google::protobuf::RepeatedPtrField<::roc::im::sdk::net::SendBatchMessageResp>&
SendBatchMessageResp::_internal_send_message_response_arr() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.send_message_response_arr_;
}
inline ::google::protobuf::RepeatedPtrField<::roc::im::sdk::net::SendBatchMessageResp>*
SendBatchMessageResp::_internal_mutable_send_message_response_arr() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.send_message_response_arr_;
}

// -------------------------------------------------------------------

// PushMessages

// repeated .roc.im.sdk.net.Message push_message_arr = 1;
inline int PushMessages::_internal_push_message_arr_size() const {
  return _internal_push_message_arr().size();
}
inline int PushMessages::push_message_arr_size() const {
  return _internal_push_message_arr_size();
}
inline void PushMessages::clear_push_message_arr() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.push_message_arr_.Clear();
}
inline ::roc::im::sdk::net::Message* PushMessages::mutable_push_message_arr(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:roc.im.sdk.net.PushMessages.push_message_arr)
  return _internal_mutable_push_message_arr()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::roc::im::sdk::net::Message>* PushMessages::mutable_push_message_arr()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:roc.im.sdk.net.PushMessages.push_message_arr)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_push_message_arr();
}
inline const ::roc::im::sdk::net::Message& PushMessages::push_message_arr(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:roc.im.sdk.net.PushMessages.push_message_arr)
  return _internal_push_message_arr().Get(index);
}
inline ::roc::im::sdk::net::Message* PushMessages::add_push_message_arr() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::roc::im::sdk::net::Message* _add = _internal_mutable_push_message_arr()->Add();
  // @@protoc_insertion_point(field_add:roc.im.sdk.net.PushMessages.push_message_arr)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::roc::im::sdk::net::Message>& PushMessages::push_message_arr() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:roc.im.sdk.net.PushMessages.push_message_arr)
  return _internal_push_message_arr();
}
inline const ::google::protobuf::RepeatedPtrField<::roc::im::sdk::net::Message>&
PushMessages::_internal_push_message_arr() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.push_message_arr_;
}
inline ::google::protobuf::RepeatedPtrField<::roc::im::sdk::net::Message>*
PushMessages::_internal_mutable_push_message_arr() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.push_message_arr_;
}

// -------------------------------------------------------------------

// RequestBody

// string request_id = 1;
inline void RequestBody::clear_request_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.request_id_.ClearToEmpty();
}
inline const std::string& RequestBody::request_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:roc.im.sdk.net.RequestBody.request_id)
  return _internal_request_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RequestBody::set_request_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.request_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:roc.im.sdk.net.RequestBody.request_id)
}
inline std::string* RequestBody::mutable_request_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_request_id();
  // @@protoc_insertion_point(field_mutable:roc.im.sdk.net.RequestBody.request_id)
  return _s;
}
inline const std::string& RequestBody::_internal_request_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.request_id_.Get();
}
inline void RequestBody::_internal_set_request_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.request_id_.Set(value, GetArena());
}
inline std::string* RequestBody::_internal_mutable_request_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.request_id_.Mutable( GetArena());
}
inline std::string* RequestBody::release_request_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:roc.im.sdk.net.RequestBody.request_id)
  return _impl_.request_id_.Release();
}
inline void RequestBody::set_allocated_request_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.request_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.request_id_.IsDefault()) {
    _impl_.request_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:roc.im.sdk.net.RequestBody.request_id)
}

// .roc.im.sdk.net.FetchMixedLinkMessagesReq fetch_mixed_link_messages_request = 2;
inline bool RequestBody::has_fetch_mixed_link_messages_request() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.fetch_mixed_link_messages_request_ != nullptr);
  return value;
}
inline void RequestBody::clear_fetch_mixed_link_messages_request() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.fetch_mixed_link_messages_request_ != nullptr) _impl_.fetch_mixed_link_messages_request_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::roc::im::sdk::net::FetchMixedLinkMessagesReq& RequestBody::_internal_fetch_mixed_link_messages_request() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::roc::im::sdk::net::FetchMixedLinkMessagesReq* p = _impl_.fetch_mixed_link_messages_request_;
  return p != nullptr ? *p : reinterpret_cast<const ::roc::im::sdk::net::FetchMixedLinkMessagesReq&>(::roc::im::sdk::net::_FetchMixedLinkMessagesReq_default_instance_);
}
inline const ::roc::im::sdk::net::FetchMixedLinkMessagesReq& RequestBody::fetch_mixed_link_messages_request() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:roc.im.sdk.net.RequestBody.fetch_mixed_link_messages_request)
  return _internal_fetch_mixed_link_messages_request();
}
inline void RequestBody::unsafe_arena_set_allocated_fetch_mixed_link_messages_request(::roc::im::sdk::net::FetchMixedLinkMessagesReq* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.fetch_mixed_link_messages_request_);
  }
  _impl_.fetch_mixed_link_messages_request_ = reinterpret_cast<::roc::im::sdk::net::FetchMixedLinkMessagesReq*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:roc.im.sdk.net.RequestBody.fetch_mixed_link_messages_request)
}
inline ::roc::im::sdk::net::FetchMixedLinkMessagesReq* RequestBody::release_fetch_mixed_link_messages_request() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::roc::im::sdk::net::FetchMixedLinkMessagesReq* released = _impl_.fetch_mixed_link_messages_request_;
  _impl_.fetch_mixed_link_messages_request_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::roc::im::sdk::net::FetchMixedLinkMessagesReq* RequestBody::unsafe_arena_release_fetch_mixed_link_messages_request() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:roc.im.sdk.net.RequestBody.fetch_mixed_link_messages_request)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::roc::im::sdk::net::FetchMixedLinkMessagesReq* temp = _impl_.fetch_mixed_link_messages_request_;
  _impl_.fetch_mixed_link_messages_request_ = nullptr;
  return temp;
}
inline ::roc::im::sdk::net::FetchMixedLinkMessagesReq* RequestBody::_internal_mutable_fetch_mixed_link_messages_request() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.fetch_mixed_link_messages_request_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::roc::im::sdk::net::FetchMixedLinkMessagesReq>(GetArena());
    _impl_.fetch_mixed_link_messages_request_ = reinterpret_cast<::roc::im::sdk::net::FetchMixedLinkMessagesReq*>(p);
  }
  return _impl_.fetch_mixed_link_messages_request_;
}
inline ::roc::im::sdk::net::FetchMixedLinkMessagesReq* RequestBody::mutable_fetch_mixed_link_messages_request() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::roc::im::sdk::net::FetchMixedLinkMessagesReq* _msg = _internal_mutable_fetch_mixed_link_messages_request();
  // @@protoc_insertion_point(field_mutable:roc.im.sdk.net.RequestBody.fetch_mixed_link_messages_request)
  return _msg;
}
inline void RequestBody::set_allocated_fetch_mixed_link_messages_request(::roc::im::sdk::net::FetchMixedLinkMessagesReq* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.fetch_mixed_link_messages_request_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.fetch_mixed_link_messages_request_ = reinterpret_cast<::roc::im::sdk::net::FetchMixedLinkMessagesReq*>(value);
  // @@protoc_insertion_point(field_set_allocated:roc.im.sdk.net.RequestBody.fetch_mixed_link_messages_request)
}

// .roc.im.sdk.net.FetchSingleLinkMessagesReq fetch_single_link_messages_request = 3;
inline bool RequestBody::has_fetch_single_link_messages_request() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.fetch_single_link_messages_request_ != nullptr);
  return value;
}
inline void RequestBody::clear_fetch_single_link_messages_request() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.fetch_single_link_messages_request_ != nullptr) _impl_.fetch_single_link_messages_request_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::roc::im::sdk::net::FetchSingleLinkMessagesReq& RequestBody::_internal_fetch_single_link_messages_request() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::roc::im::sdk::net::FetchSingleLinkMessagesReq* p = _impl_.fetch_single_link_messages_request_;
  return p != nullptr ? *p : reinterpret_cast<const ::roc::im::sdk::net::FetchSingleLinkMessagesReq&>(::roc::im::sdk::net::_FetchSingleLinkMessagesReq_default_instance_);
}
inline const ::roc::im::sdk::net::FetchSingleLinkMessagesReq& RequestBody::fetch_single_link_messages_request() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:roc.im.sdk.net.RequestBody.fetch_single_link_messages_request)
  return _internal_fetch_single_link_messages_request();
}
inline void RequestBody::unsafe_arena_set_allocated_fetch_single_link_messages_request(::roc::im::sdk::net::FetchSingleLinkMessagesReq* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.fetch_single_link_messages_request_);
  }
  _impl_.fetch_single_link_messages_request_ = reinterpret_cast<::roc::im::sdk::net::FetchSingleLinkMessagesReq*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:roc.im.sdk.net.RequestBody.fetch_single_link_messages_request)
}
inline ::roc::im::sdk::net::FetchSingleLinkMessagesReq* RequestBody::release_fetch_single_link_messages_request() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::roc::im::sdk::net::FetchSingleLinkMessagesReq* released = _impl_.fetch_single_link_messages_request_;
  _impl_.fetch_single_link_messages_request_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::roc::im::sdk::net::FetchSingleLinkMessagesReq* RequestBody::unsafe_arena_release_fetch_single_link_messages_request() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:roc.im.sdk.net.RequestBody.fetch_single_link_messages_request)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::roc::im::sdk::net::FetchSingleLinkMessagesReq* temp = _impl_.fetch_single_link_messages_request_;
  _impl_.fetch_single_link_messages_request_ = nullptr;
  return temp;
}
inline ::roc::im::sdk::net::FetchSingleLinkMessagesReq* RequestBody::_internal_mutable_fetch_single_link_messages_request() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.fetch_single_link_messages_request_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::roc::im::sdk::net::FetchSingleLinkMessagesReq>(GetArena());
    _impl_.fetch_single_link_messages_request_ = reinterpret_cast<::roc::im::sdk::net::FetchSingleLinkMessagesReq*>(p);
  }
  return _impl_.fetch_single_link_messages_request_;
}
inline ::roc::im::sdk::net::FetchSingleLinkMessagesReq* RequestBody::mutable_fetch_single_link_messages_request() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::roc::im::sdk::net::FetchSingleLinkMessagesReq* _msg = _internal_mutable_fetch_single_link_messages_request();
  // @@protoc_insertion_point(field_mutable:roc.im.sdk.net.RequestBody.fetch_single_link_messages_request)
  return _msg;
}
inline void RequestBody::set_allocated_fetch_single_link_messages_request(::roc::im::sdk::net::FetchSingleLinkMessagesReq* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.fetch_single_link_messages_request_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.fetch_single_link_messages_request_ = reinterpret_cast<::roc::im::sdk::net::FetchSingleLinkMessagesReq*>(value);
  // @@protoc_insertion_point(field_set_allocated:roc.im.sdk.net.RequestBody.fetch_single_link_messages_request)
}

// .roc.im.sdk.net.SendBatchMessageReq send_batch_messages_request = 4;
inline bool RequestBody::has_send_batch_messages_request() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.send_batch_messages_request_ != nullptr);
  return value;
}
inline void RequestBody::clear_send_batch_messages_request() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.send_batch_messages_request_ != nullptr) _impl_.send_batch_messages_request_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::roc::im::sdk::net::SendBatchMessageReq& RequestBody::_internal_send_batch_messages_request() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::roc::im::sdk::net::SendBatchMessageReq* p = _impl_.send_batch_messages_request_;
  return p != nullptr ? *p : reinterpret_cast<const ::roc::im::sdk::net::SendBatchMessageReq&>(::roc::im::sdk::net::_SendBatchMessageReq_default_instance_);
}
inline const ::roc::im::sdk::net::SendBatchMessageReq& RequestBody::send_batch_messages_request() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:roc.im.sdk.net.RequestBody.send_batch_messages_request)
  return _internal_send_batch_messages_request();
}
inline void RequestBody::unsafe_arena_set_allocated_send_batch_messages_request(::roc::im::sdk::net::SendBatchMessageReq* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.send_batch_messages_request_);
  }
  _impl_.send_batch_messages_request_ = reinterpret_cast<::roc::im::sdk::net::SendBatchMessageReq*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:roc.im.sdk.net.RequestBody.send_batch_messages_request)
}
inline ::roc::im::sdk::net::SendBatchMessageReq* RequestBody::release_send_batch_messages_request() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::roc::im::sdk::net::SendBatchMessageReq* released = _impl_.send_batch_messages_request_;
  _impl_.send_batch_messages_request_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::roc::im::sdk::net::SendBatchMessageReq* RequestBody::unsafe_arena_release_send_batch_messages_request() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:roc.im.sdk.net.RequestBody.send_batch_messages_request)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::roc::im::sdk::net::SendBatchMessageReq* temp = _impl_.send_batch_messages_request_;
  _impl_.send_batch_messages_request_ = nullptr;
  return temp;
}
inline ::roc::im::sdk::net::SendBatchMessageReq* RequestBody::_internal_mutable_send_batch_messages_request() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.send_batch_messages_request_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::roc::im::sdk::net::SendBatchMessageReq>(GetArena());
    _impl_.send_batch_messages_request_ = reinterpret_cast<::roc::im::sdk::net::SendBatchMessageReq*>(p);
  }
  return _impl_.send_batch_messages_request_;
}
inline ::roc::im::sdk::net::SendBatchMessageReq* RequestBody::mutable_send_batch_messages_request() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000004u;
  ::roc::im::sdk::net::SendBatchMessageReq* _msg = _internal_mutable_send_batch_messages_request();
  // @@protoc_insertion_point(field_mutable:roc.im.sdk.net.RequestBody.send_batch_messages_request)
  return _msg;
}
inline void RequestBody::set_allocated_send_batch_messages_request(::roc::im::sdk::net::SendBatchMessageReq* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.send_batch_messages_request_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.send_batch_messages_request_ = reinterpret_cast<::roc::im::sdk::net::SendBatchMessageReq*>(value);
  // @@protoc_insertion_point(field_set_allocated:roc.im.sdk.net.RequestBody.send_batch_messages_request)
}

// string url = 5;
inline void RequestBody::clear_url() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.url_.ClearToEmpty();
}
inline const std::string& RequestBody::url() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:roc.im.sdk.net.RequestBody.url)
  return _internal_url();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RequestBody::set_url(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.url_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:roc.im.sdk.net.RequestBody.url)
}
inline std::string* RequestBody::mutable_url() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_url();
  // @@protoc_insertion_point(field_mutable:roc.im.sdk.net.RequestBody.url)
  return _s;
}
inline const std::string& RequestBody::_internal_url() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.url_.Get();
}
inline void RequestBody::_internal_set_url(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.url_.Set(value, GetArena());
}
inline std::string* RequestBody::_internal_mutable_url() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.url_.Mutable( GetArena());
}
inline std::string* RequestBody::release_url() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:roc.im.sdk.net.RequestBody.url)
  return _impl_.url_.Release();
}
inline void RequestBody::set_allocated_url(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.url_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.url_.IsDefault()) {
    _impl_.url_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:roc.im.sdk.net.RequestBody.url)
}

// -------------------------------------------------------------------

// ResponseBody

// string response_id = 1;
inline void ResponseBody::clear_response_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.response_id_.ClearToEmpty();
}
inline const std::string& ResponseBody::response_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:roc.im.sdk.net.ResponseBody.response_id)
  return _internal_response_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ResponseBody::set_response_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.response_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:roc.im.sdk.net.ResponseBody.response_id)
}
inline std::string* ResponseBody::mutable_response_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_response_id();
  // @@protoc_insertion_point(field_mutable:roc.im.sdk.net.ResponseBody.response_id)
  return _s;
}
inline const std::string& ResponseBody::_internal_response_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.response_id_.Get();
}
inline void ResponseBody::_internal_set_response_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.response_id_.Set(value, GetArena());
}
inline std::string* ResponseBody::_internal_mutable_response_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.response_id_.Mutable( GetArena());
}
inline std::string* ResponseBody::release_response_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:roc.im.sdk.net.ResponseBody.response_id)
  return _impl_.response_id_.Release();
}
inline void ResponseBody::set_allocated_response_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.response_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.response_id_.IsDefault()) {
    _impl_.response_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:roc.im.sdk.net.ResponseBody.response_id)
}

// .roc.im.sdk.net.FetchMixedLinkMessagesResp fetch_mixed_link_messages_response = 2;
inline bool ResponseBody::has_fetch_mixed_link_messages_response() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.fetch_mixed_link_messages_response_ != nullptr);
  return value;
}
inline void ResponseBody::clear_fetch_mixed_link_messages_response() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.fetch_mixed_link_messages_response_ != nullptr) _impl_.fetch_mixed_link_messages_response_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::roc::im::sdk::net::FetchMixedLinkMessagesResp& ResponseBody::_internal_fetch_mixed_link_messages_response() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::roc::im::sdk::net::FetchMixedLinkMessagesResp* p = _impl_.fetch_mixed_link_messages_response_;
  return p != nullptr ? *p : reinterpret_cast<const ::roc::im::sdk::net::FetchMixedLinkMessagesResp&>(::roc::im::sdk::net::_FetchMixedLinkMessagesResp_default_instance_);
}
inline const ::roc::im::sdk::net::FetchMixedLinkMessagesResp& ResponseBody::fetch_mixed_link_messages_response() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:roc.im.sdk.net.ResponseBody.fetch_mixed_link_messages_response)
  return _internal_fetch_mixed_link_messages_response();
}
inline void ResponseBody::unsafe_arena_set_allocated_fetch_mixed_link_messages_response(::roc::im::sdk::net::FetchMixedLinkMessagesResp* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.fetch_mixed_link_messages_response_);
  }
  _impl_.fetch_mixed_link_messages_response_ = reinterpret_cast<::roc::im::sdk::net::FetchMixedLinkMessagesResp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:roc.im.sdk.net.ResponseBody.fetch_mixed_link_messages_response)
}
inline ::roc::im::sdk::net::FetchMixedLinkMessagesResp* ResponseBody::release_fetch_mixed_link_messages_response() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::roc::im::sdk::net::FetchMixedLinkMessagesResp* released = _impl_.fetch_mixed_link_messages_response_;
  _impl_.fetch_mixed_link_messages_response_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::roc::im::sdk::net::FetchMixedLinkMessagesResp* ResponseBody::unsafe_arena_release_fetch_mixed_link_messages_response() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:roc.im.sdk.net.ResponseBody.fetch_mixed_link_messages_response)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::roc::im::sdk::net::FetchMixedLinkMessagesResp* temp = _impl_.fetch_mixed_link_messages_response_;
  _impl_.fetch_mixed_link_messages_response_ = nullptr;
  return temp;
}
inline ::roc::im::sdk::net::FetchMixedLinkMessagesResp* ResponseBody::_internal_mutable_fetch_mixed_link_messages_response() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.fetch_mixed_link_messages_response_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::roc::im::sdk::net::FetchMixedLinkMessagesResp>(GetArena());
    _impl_.fetch_mixed_link_messages_response_ = reinterpret_cast<::roc::im::sdk::net::FetchMixedLinkMessagesResp*>(p);
  }
  return _impl_.fetch_mixed_link_messages_response_;
}
inline ::roc::im::sdk::net::FetchMixedLinkMessagesResp* ResponseBody::mutable_fetch_mixed_link_messages_response() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::roc::im::sdk::net::FetchMixedLinkMessagesResp* _msg = _internal_mutable_fetch_mixed_link_messages_response();
  // @@protoc_insertion_point(field_mutable:roc.im.sdk.net.ResponseBody.fetch_mixed_link_messages_response)
  return _msg;
}
inline void ResponseBody::set_allocated_fetch_mixed_link_messages_response(::roc::im::sdk::net::FetchMixedLinkMessagesResp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.fetch_mixed_link_messages_response_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.fetch_mixed_link_messages_response_ = reinterpret_cast<::roc::im::sdk::net::FetchMixedLinkMessagesResp*>(value);
  // @@protoc_insertion_point(field_set_allocated:roc.im.sdk.net.ResponseBody.fetch_mixed_link_messages_response)
}

// .roc.im.sdk.net.FetchSingleLinkMessagesResp fetch_single_link_messages_response = 3;
inline bool ResponseBody::has_fetch_single_link_messages_response() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.fetch_single_link_messages_response_ != nullptr);
  return value;
}
inline void ResponseBody::clear_fetch_single_link_messages_response() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.fetch_single_link_messages_response_ != nullptr) _impl_.fetch_single_link_messages_response_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::roc::im::sdk::net::FetchSingleLinkMessagesResp& ResponseBody::_internal_fetch_single_link_messages_response() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::roc::im::sdk::net::FetchSingleLinkMessagesResp* p = _impl_.fetch_single_link_messages_response_;
  return p != nullptr ? *p : reinterpret_cast<const ::roc::im::sdk::net::FetchSingleLinkMessagesResp&>(::roc::im::sdk::net::_FetchSingleLinkMessagesResp_default_instance_);
}
inline const ::roc::im::sdk::net::FetchSingleLinkMessagesResp& ResponseBody::fetch_single_link_messages_response() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:roc.im.sdk.net.ResponseBody.fetch_single_link_messages_response)
  return _internal_fetch_single_link_messages_response();
}
inline void ResponseBody::unsafe_arena_set_allocated_fetch_single_link_messages_response(::roc::im::sdk::net::FetchSingleLinkMessagesResp* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.fetch_single_link_messages_response_);
  }
  _impl_.fetch_single_link_messages_response_ = reinterpret_cast<::roc::im::sdk::net::FetchSingleLinkMessagesResp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:roc.im.sdk.net.ResponseBody.fetch_single_link_messages_response)
}
inline ::roc::im::sdk::net::FetchSingleLinkMessagesResp* ResponseBody::release_fetch_single_link_messages_response() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::roc::im::sdk::net::FetchSingleLinkMessagesResp* released = _impl_.fetch_single_link_messages_response_;
  _impl_.fetch_single_link_messages_response_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::roc::im::sdk::net::FetchSingleLinkMessagesResp* ResponseBody::unsafe_arena_release_fetch_single_link_messages_response() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:roc.im.sdk.net.ResponseBody.fetch_single_link_messages_response)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::roc::im::sdk::net::FetchSingleLinkMessagesResp* temp = _impl_.fetch_single_link_messages_response_;
  _impl_.fetch_single_link_messages_response_ = nullptr;
  return temp;
}
inline ::roc::im::sdk::net::FetchSingleLinkMessagesResp* ResponseBody::_internal_mutable_fetch_single_link_messages_response() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.fetch_single_link_messages_response_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::roc::im::sdk::net::FetchSingleLinkMessagesResp>(GetArena());
    _impl_.fetch_single_link_messages_response_ = reinterpret_cast<::roc::im::sdk::net::FetchSingleLinkMessagesResp*>(p);
  }
  return _impl_.fetch_single_link_messages_response_;
}
inline ::roc::im::sdk::net::FetchSingleLinkMessagesResp* ResponseBody::mutable_fetch_single_link_messages_response() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::roc::im::sdk::net::FetchSingleLinkMessagesResp* _msg = _internal_mutable_fetch_single_link_messages_response();
  // @@protoc_insertion_point(field_mutable:roc.im.sdk.net.ResponseBody.fetch_single_link_messages_response)
  return _msg;
}
inline void ResponseBody::set_allocated_fetch_single_link_messages_response(::roc::im::sdk::net::FetchSingleLinkMessagesResp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.fetch_single_link_messages_response_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.fetch_single_link_messages_response_ = reinterpret_cast<::roc::im::sdk::net::FetchSingleLinkMessagesResp*>(value);
  // @@protoc_insertion_point(field_set_allocated:roc.im.sdk.net.ResponseBody.fetch_single_link_messages_response)
}

// .roc.im.sdk.net.SendBatchMessageResp send_batch_messages_response = 4;
inline bool ResponseBody::has_send_batch_messages_response() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.send_batch_messages_response_ != nullptr);
  return value;
}
inline void ResponseBody::clear_send_batch_messages_response() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.send_batch_messages_response_ != nullptr) _impl_.send_batch_messages_response_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::roc::im::sdk::net::SendBatchMessageResp& ResponseBody::_internal_send_batch_messages_response() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::roc::im::sdk::net::SendBatchMessageResp* p = _impl_.send_batch_messages_response_;
  return p != nullptr ? *p : reinterpret_cast<const ::roc::im::sdk::net::SendBatchMessageResp&>(::roc::im::sdk::net::_SendBatchMessageResp_default_instance_);
}
inline const ::roc::im::sdk::net::SendBatchMessageResp& ResponseBody::send_batch_messages_response() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:roc.im.sdk.net.ResponseBody.send_batch_messages_response)
  return _internal_send_batch_messages_response();
}
inline void ResponseBody::unsafe_arena_set_allocated_send_batch_messages_response(::roc::im::sdk::net::SendBatchMessageResp* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.send_batch_messages_response_);
  }
  _impl_.send_batch_messages_response_ = reinterpret_cast<::roc::im::sdk::net::SendBatchMessageResp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:roc.im.sdk.net.ResponseBody.send_batch_messages_response)
}
inline ::roc::im::sdk::net::SendBatchMessageResp* ResponseBody::release_send_batch_messages_response() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::roc::im::sdk::net::SendBatchMessageResp* released = _impl_.send_batch_messages_response_;
  _impl_.send_batch_messages_response_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::roc::im::sdk::net::SendBatchMessageResp* ResponseBody::unsafe_arena_release_send_batch_messages_response() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:roc.im.sdk.net.ResponseBody.send_batch_messages_response)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::roc::im::sdk::net::SendBatchMessageResp* temp = _impl_.send_batch_messages_response_;
  _impl_.send_batch_messages_response_ = nullptr;
  return temp;
}
inline ::roc::im::sdk::net::SendBatchMessageResp* ResponseBody::_internal_mutable_send_batch_messages_response() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.send_batch_messages_response_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::roc::im::sdk::net::SendBatchMessageResp>(GetArena());
    _impl_.send_batch_messages_response_ = reinterpret_cast<::roc::im::sdk::net::SendBatchMessageResp*>(p);
  }
  return _impl_.send_batch_messages_response_;
}
inline ::roc::im::sdk::net::SendBatchMessageResp* ResponseBody::mutable_send_batch_messages_response() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000004u;
  ::roc::im::sdk::net::SendBatchMessageResp* _msg = _internal_mutable_send_batch_messages_response();
  // @@protoc_insertion_point(field_mutable:roc.im.sdk.net.ResponseBody.send_batch_messages_response)
  return _msg;
}
inline void ResponseBody::set_allocated_send_batch_messages_response(::roc::im::sdk::net::SendBatchMessageResp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.send_batch_messages_response_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.send_batch_messages_response_ = reinterpret_cast<::roc::im::sdk::net::SendBatchMessageResp*>(value);
  // @@protoc_insertion_point(field_set_allocated:roc.im.sdk.net.ResponseBody.send_batch_messages_response)
}

// .roc.im.sdk.net.PushMessages push_messages = 5;
inline bool ResponseBody::has_push_messages() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.push_messages_ != nullptr);
  return value;
}
inline void ResponseBody::clear_push_messages() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.push_messages_ != nullptr) _impl_.push_messages_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::roc::im::sdk::net::PushMessages& ResponseBody::_internal_push_messages() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::roc::im::sdk::net::PushMessages* p = _impl_.push_messages_;
  return p != nullptr ? *p : reinterpret_cast<const ::roc::im::sdk::net::PushMessages&>(::roc::im::sdk::net::_PushMessages_default_instance_);
}
inline const ::roc::im::sdk::net::PushMessages& ResponseBody::push_messages() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:roc.im.sdk.net.ResponseBody.push_messages)
  return _internal_push_messages();
}
inline void ResponseBody::unsafe_arena_set_allocated_push_messages(::roc::im::sdk::net::PushMessages* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.push_messages_);
  }
  _impl_.push_messages_ = reinterpret_cast<::roc::im::sdk::net::PushMessages*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:roc.im.sdk.net.ResponseBody.push_messages)
}
inline ::roc::im::sdk::net::PushMessages* ResponseBody::release_push_messages() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::roc::im::sdk::net::PushMessages* released = _impl_.push_messages_;
  _impl_.push_messages_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::roc::im::sdk::net::PushMessages* ResponseBody::unsafe_arena_release_push_messages() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:roc.im.sdk.net.ResponseBody.push_messages)

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::roc::im::sdk::net::PushMessages* temp = _impl_.push_messages_;
  _impl_.push_messages_ = nullptr;
  return temp;
}
inline ::roc::im::sdk::net::PushMessages* ResponseBody::_internal_mutable_push_messages() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.push_messages_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::roc::im::sdk::net::PushMessages>(GetArena());
    _impl_.push_messages_ = reinterpret_cast<::roc::im::sdk::net::PushMessages*>(p);
  }
  return _impl_.push_messages_;
}
inline ::roc::im::sdk::net::PushMessages* ResponseBody::mutable_push_messages() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000008u;
  ::roc::im::sdk::net::PushMessages* _msg = _internal_mutable_push_messages();
  // @@protoc_insertion_point(field_mutable:roc.im.sdk.net.ResponseBody.push_messages)
  return _msg;
}
inline void ResponseBody::set_allocated_push_messages(::roc::im::sdk::net::PushMessages* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.push_messages_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }

  _impl_.push_messages_ = reinterpret_cast<::roc::im::sdk::net::PushMessages*>(value);
  // @@protoc_insertion_point(field_set_allocated:roc.im.sdk.net.ResponseBody.push_messages)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace net
}  // namespace sdk
}  // namespace im
}  // namespace roc


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // LCModel_2eproto_2epb_2eh
