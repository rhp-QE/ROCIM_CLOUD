// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v3.21.6
// source: model/im.proto

package imcloud_pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Conversation struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 会话ID
	ConvertsionId string `protobuf:"bytes,1,opt,name=convertsion_id,json=convertsionId,proto3" json:"convertsion_id,omitempty"`
	// 群主id
	OwnerId string `protobuf:"bytes,2,opt,name=owner_id,json=ownerId,proto3" json:"owner_id,omitempty"`
	// ext
	Ext           map[string]string `protobuf:"bytes,3,rep,name=ext,proto3" json:"ext,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Conversation) Reset() {
	*x = Conversation{}
	mi := &file_model_im_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Conversation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Conversation) ProtoMessage() {}

func (x *Conversation) ProtoReflect() protoreflect.Message {
	mi := &file_model_im_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Conversation.ProtoReflect.Descriptor instead.
func (*Conversation) Descriptor() ([]byte, []int) {
	return file_model_im_proto_rawDescGZIP(), []int{0}
}

func (x *Conversation) GetConvertsionId() string {
	if x != nil {
		return x.ConvertsionId
	}
	return ""
}

func (x *Conversation) GetOwnerId() string {
	if x != nil {
		return x.OwnerId
	}
	return ""
}

func (x *Conversation) GetExt() map[string]string {
	if x != nil {
		return x.Ext
	}
	return nil
}

type Message struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 消息 ID
	MessageId string `protobuf:"bytes,1,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	// 消息类容
	Content       []byte            `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
	Ext           map[string]string `protobuf:"bytes,3,rep,name=ext,proto3" json:"ext,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	SenderId      string            `protobuf:"bytes,4,opt,name=sender_id,json=senderId,proto3" json:"sender_id,omitempty"`
	ConvertsionId string            `protobuf:"bytes,5,opt,name=convertsion_id,json=convertsionId,proto3" json:"convertsion_id,omitempty"`
	MessageType   int64             `protobuf:"varint,6,opt,name=message_type,json=messageType,proto3" json:"message_type,omitempty"`
	Index         int64             `protobuf:"varint,7,opt,name=index,proto3" json:"index,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Message) Reset() {
	*x = Message{}
	mi := &file_model_im_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message) ProtoMessage() {}

func (x *Message) ProtoReflect() protoreflect.Message {
	mi := &file_model_im_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message.ProtoReflect.Descriptor instead.
func (*Message) Descriptor() ([]byte, []int) {
	return file_model_im_proto_rawDescGZIP(), []int{1}
}

func (x *Message) GetMessageId() string {
	if x != nil {
		return x.MessageId
	}
	return ""
}

func (x *Message) GetContent() []byte {
	if x != nil {
		return x.Content
	}
	return nil
}

func (x *Message) GetExt() map[string]string {
	if x != nil {
		return x.Ext
	}
	return nil
}

func (x *Message) GetSenderId() string {
	if x != nil {
		return x.SenderId
	}
	return ""
}

func (x *Message) GetConvertsionId() string {
	if x != nil {
		return x.ConvertsionId
	}
	return ""
}

func (x *Message) GetMessageType() int64 {
	if x != nil {
		return x.MessageType
	}
	return 0
}

func (x *Message) GetIndex() int64 {
	if x != nil {
		return x.Index
	}
	return 0
}

type ConversationMessages struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	ConversationId string                 `protobuf:"bytes,1,opt,name=conversation_id,json=conversationId,proto3" json:"conversation_id,omitempty"`
	MessageArr     []*Message             `protobuf:"bytes,2,rep,name=message_arr,json=messageArr,proto3" json:"message_arr,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ConversationMessages) Reset() {
	*x = ConversationMessages{}
	mi := &file_model_im_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConversationMessages) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConversationMessages) ProtoMessage() {}

func (x *ConversationMessages) ProtoReflect() protoreflect.Message {
	mi := &file_model_im_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConversationMessages.ProtoReflect.Descriptor instead.
func (*ConversationMessages) Descriptor() ([]byte, []int) {
	return file_model_im_proto_rawDescGZIP(), []int{2}
}

func (x *ConversationMessages) GetConversationId() string {
	if x != nil {
		return x.ConversationId
	}
	return ""
}

func (x *ConversationMessages) GetMessageArr() []*Message {
	if x != nil {
		return x.MessageArr
	}
	return nil
}

// 拉取单链信息
// -------------------- fetch conv message ------------------
type FetchSingleLinkMessagesReq struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	ConversationId string                 `protobuf:"bytes,1,opt,name=conversation_id,json=conversationId,proto3" json:"conversation_id,omitempty"`
	FromIndex      int64                  `protobuf:"varint,2,opt,name=from_index,json=fromIndex,proto3" json:"from_index,omitempty"`
	ToIndex        int64                  `protobuf:"varint,3,opt,name=to_index,json=toIndex,proto3" json:"to_index,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *FetchSingleLinkMessagesReq) Reset() {
	*x = FetchSingleLinkMessagesReq{}
	mi := &file_model_im_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FetchSingleLinkMessagesReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchSingleLinkMessagesReq) ProtoMessage() {}

func (x *FetchSingleLinkMessagesReq) ProtoReflect() protoreflect.Message {
	mi := &file_model_im_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchSingleLinkMessagesReq.ProtoReflect.Descriptor instead.
func (*FetchSingleLinkMessagesReq) Descriptor() ([]byte, []int) {
	return file_model_im_proto_rawDescGZIP(), []int{3}
}

func (x *FetchSingleLinkMessagesReq) GetConversationId() string {
	if x != nil {
		return x.ConversationId
	}
	return ""
}

func (x *FetchSingleLinkMessagesReq) GetFromIndex() int64 {
	if x != nil {
		return x.FromIndex
	}
	return 0
}

func (x *FetchSingleLinkMessagesReq) GetToIndex() int64 {
	if x != nil {
		return x.ToIndex
	}
	return 0
}

type FetchSingleLinkMessagesResp struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	ConversationMessages *ConversationMessages  `protobuf:"bytes,1,opt,name=conversation_messages,json=conversationMessages,proto3" json:"conversation_messages,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *FetchSingleLinkMessagesResp) Reset() {
	*x = FetchSingleLinkMessagesResp{}
	mi := &file_model_im_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FetchSingleLinkMessagesResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchSingleLinkMessagesResp) ProtoMessage() {}

func (x *FetchSingleLinkMessagesResp) ProtoReflect() protoreflect.Message {
	mi := &file_model_im_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchSingleLinkMessagesResp.ProtoReflect.Descriptor instead.
func (*FetchSingleLinkMessagesResp) Descriptor() ([]byte, []int) {
	return file_model_im_proto_rawDescGZIP(), []int{4}
}

func (x *FetchSingleLinkMessagesResp) GetConversationMessages() *ConversationMessages {
	if x != nil {
		return x.ConversationMessages
	}
	return nil
}

// 拉取混链信息
// --------------------- fetch convs -------------------------
type FetchMixedLinkMessagesReq struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	ConversationIdArr []string               `protobuf:"bytes,1,rep,name=conversation_id_arr,json=conversationIdArr,proto3" json:"conversation_id_arr,omitempty"`
	Count             int64                  `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"` // 每个会话携带的消息数目
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *FetchMixedLinkMessagesReq) Reset() {
	*x = FetchMixedLinkMessagesReq{}
	mi := &file_model_im_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FetchMixedLinkMessagesReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchMixedLinkMessagesReq) ProtoMessage() {}

func (x *FetchMixedLinkMessagesReq) ProtoReflect() protoreflect.Message {
	mi := &file_model_im_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchMixedLinkMessagesReq.ProtoReflect.Descriptor instead.
func (*FetchMixedLinkMessagesReq) Descriptor() ([]byte, []int) {
	return file_model_im_proto_rawDescGZIP(), []int{5}
}

func (x *FetchMixedLinkMessagesReq) GetConversationIdArr() []string {
	if x != nil {
		return x.ConversationIdArr
	}
	return nil
}

func (x *FetchMixedLinkMessagesReq) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

type FetchMixedLinkMessagesResp struct {
	state                protoimpl.MessageState  `protogen:"open.v1"`
	ConversationMessages []*ConversationMessages `protobuf:"bytes,1,rep,name=conversation_messages,json=conversationMessages,proto3" json:"conversation_messages,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *FetchMixedLinkMessagesResp) Reset() {
	*x = FetchMixedLinkMessagesResp{}
	mi := &file_model_im_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FetchMixedLinkMessagesResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchMixedLinkMessagesResp) ProtoMessage() {}

func (x *FetchMixedLinkMessagesResp) ProtoReflect() protoreflect.Message {
	mi := &file_model_im_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchMixedLinkMessagesResp.ProtoReflect.Descriptor instead.
func (*FetchMixedLinkMessagesResp) Descriptor() ([]byte, []int) {
	return file_model_im_proto_rawDescGZIP(), []int{6}
}

func (x *FetchMixedLinkMessagesResp) GetConversationMessages() []*ConversationMessages {
	if x != nil {
		return x.ConversationMessages
	}
	return nil
}

// 发送消息信息
// -------------------- send message ------------------------
type SendBatchMessageReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MessageArr    []*Message             `protobuf:"bytes,1,rep,name=message_arr,json=messageArr,proto3" json:"message_arr,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SendBatchMessageReq) Reset() {
	*x = SendBatchMessageReq{}
	mi := &file_model_im_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SendBatchMessageReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendBatchMessageReq) ProtoMessage() {}

func (x *SendBatchMessageReq) ProtoReflect() protoreflect.Message {
	mi := &file_model_im_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendBatchMessageReq.ProtoReflect.Descriptor instead.
func (*SendBatchMessageReq) Descriptor() ([]byte, []int) {
	return file_model_im_proto_rawDescGZIP(), []int{7}
}

func (x *SendBatchMessageReq) GetMessageArr() []*Message {
	if x != nil {
		return x.MessageArr
	}
	return nil
}

type SendBatchMessageResp struct {
	state                  protoimpl.MessageState  `protogen:"open.v1"`
	SendMessageResponseArr []*SendBatchMessageResp `protobuf:"bytes,1,rep,name=send_message_response_arr,json=sendMessageResponseArr,proto3" json:"send_message_response_arr,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *SendBatchMessageResp) Reset() {
	*x = SendBatchMessageResp{}
	mi := &file_model_im_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SendBatchMessageResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendBatchMessageResp) ProtoMessage() {}

func (x *SendBatchMessageResp) ProtoReflect() protoreflect.Message {
	mi := &file_model_im_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendBatchMessageResp.ProtoReflect.Descriptor instead.
func (*SendBatchMessageResp) Descriptor() ([]byte, []int) {
	return file_model_im_proto_rawDescGZIP(), []int{8}
}

func (x *SendBatchMessageResp) GetSendMessageResponseArr() []*SendBatchMessageResp {
	if x != nil {
		return x.SendMessageResponseArr
	}
	return nil
}

// 下推消息
// --------------------- push message -----------------------
type PushMessages struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	PushMessageArr []*Message             `protobuf:"bytes,1,rep,name=push_message_arr,json=pushMessageArr,proto3" json:"push_message_arr,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *PushMessages) Reset() {
	*x = PushMessages{}
	mi := &file_model_im_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PushMessages) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PushMessages) ProtoMessage() {}

func (x *PushMessages) ProtoReflect() protoreflect.Message {
	mi := &file_model_im_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PushMessages.ProtoReflect.Descriptor instead.
func (*PushMessages) Descriptor() ([]byte, []int) {
	return file_model_im_proto_rawDescGZIP(), []int{9}
}

func (x *PushMessages) GetPushMessageArr() []*Message {
	if x != nil {
		return x.PushMessageArr
	}
	return nil
}

type RequestBody struct {
	state                          protoimpl.MessageState      `protogen:"open.v1"`
	RequestId                      string                      `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	FetchMixedLinkMessagesRequest  *FetchMixedLinkMessagesReq  `protobuf:"bytes,2,opt,name=fetch_mixed_link_messages_request,json=fetchMixedLinkMessagesRequest,proto3" json:"fetch_mixed_link_messages_request,omitempty"`
	FetchSingleLinkMessagesRequest *FetchSingleLinkMessagesReq `protobuf:"bytes,3,opt,name=fetch_single_link_messages_request,json=fetchSingleLinkMessagesRequest,proto3" json:"fetch_single_link_messages_request,omitempty"`
	SendBatchMessagesRequest       *SendBatchMessageReq        `protobuf:"bytes,4,opt,name=send_batch_messages_request,json=sendBatchMessagesRequest,proto3" json:"send_batch_messages_request,omitempty"`
	Url                            string                      `protobuf:"bytes,5,opt,name=url,proto3" json:"url,omitempty"`
	unknownFields                  protoimpl.UnknownFields
	sizeCache                      protoimpl.SizeCache
}

func (x *RequestBody) Reset() {
	*x = RequestBody{}
	mi := &file_model_im_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RequestBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestBody) ProtoMessage() {}

func (x *RequestBody) ProtoReflect() protoreflect.Message {
	mi := &file_model_im_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestBody.ProtoReflect.Descriptor instead.
func (*RequestBody) Descriptor() ([]byte, []int) {
	return file_model_im_proto_rawDescGZIP(), []int{10}
}

func (x *RequestBody) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *RequestBody) GetFetchMixedLinkMessagesRequest() *FetchMixedLinkMessagesReq {
	if x != nil {
		return x.FetchMixedLinkMessagesRequest
	}
	return nil
}

func (x *RequestBody) GetFetchSingleLinkMessagesRequest() *FetchSingleLinkMessagesReq {
	if x != nil {
		return x.FetchSingleLinkMessagesRequest
	}
	return nil
}

func (x *RequestBody) GetSendBatchMessagesRequest() *SendBatchMessageReq {
	if x != nil {
		return x.SendBatchMessagesRequest
	}
	return nil
}

func (x *RequestBody) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type ResponseBody struct {
	state                           protoimpl.MessageState       `protogen:"open.v1"`
	ResponseId                      string                       `protobuf:"bytes,1,opt,name=response_id,json=responseId,proto3" json:"response_id,omitempty"`
	FetchMixedLinkMessagesResponse  *FetchMixedLinkMessagesResp  `protobuf:"bytes,2,opt,name=fetch_mixed_link_messages_response,json=fetchMixedLinkMessagesResponse,proto3" json:"fetch_mixed_link_messages_response,omitempty"`
	FetchSingleLinkMessagesResponse *FetchSingleLinkMessagesResp `protobuf:"bytes,3,opt,name=fetch_single_link_messages_response,json=fetchSingleLinkMessagesResponse,proto3" json:"fetch_single_link_messages_response,omitempty"`
	SendBatchMessagesResponse       *SendBatchMessageResp        `protobuf:"bytes,4,opt,name=send_batch_messages_response,json=sendBatchMessagesResponse,proto3" json:"send_batch_messages_response,omitempty"`
	PushMessage                     *PushMessages                `protobuf:"bytes,5,opt,name=push_message,json=pushMessage,proto3" json:"push_message,omitempty"`
	unknownFields                   protoimpl.UnknownFields
	sizeCache                       protoimpl.SizeCache
}

func (x *ResponseBody) Reset() {
	*x = ResponseBody{}
	mi := &file_model_im_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResponseBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseBody) ProtoMessage() {}

func (x *ResponseBody) ProtoReflect() protoreflect.Message {
	mi := &file_model_im_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseBody.ProtoReflect.Descriptor instead.
func (*ResponseBody) Descriptor() ([]byte, []int) {
	return file_model_im_proto_rawDescGZIP(), []int{11}
}

func (x *ResponseBody) GetResponseId() string {
	if x != nil {
		return x.ResponseId
	}
	return ""
}

func (x *ResponseBody) GetFetchMixedLinkMessagesResponse() *FetchMixedLinkMessagesResp {
	if x != nil {
		return x.FetchMixedLinkMessagesResponse
	}
	return nil
}

func (x *ResponseBody) GetFetchSingleLinkMessagesResponse() *FetchSingleLinkMessagesResp {
	if x != nil {
		return x.FetchSingleLinkMessagesResponse
	}
	return nil
}

func (x *ResponseBody) GetSendBatchMessagesResponse() *SendBatchMessageResp {
	if x != nil {
		return x.SendBatchMessagesResponse
	}
	return nil
}

func (x *ResponseBody) GetPushMessage() *PushMessages {
	if x != nil {
		return x.PushMessage
	}
	return nil
}

var File_model_im_proto protoreflect.FileDescriptor

var file_model_im_proto_rawDesc = string([]byte{
	0x0a, 0x0e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2f, 0x69, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x0e, 0x72, 0x6f, 0x63, 0x2e, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x6e, 0x65, 0x74,
	0x22, 0xc1, 0x01, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x74, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x03, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x72, 0x6f, 0x63, 0x2e, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x6e, 0x65,
	0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x45,
	0x78, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x03, 0x65, 0x78, 0x74, 0x1a, 0x36, 0x0a, 0x08,
	0x45, 0x78, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0xab, 0x02, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x03, 0x65, 0x78, 0x74,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x72, 0x6f, 0x63, 0x2e, 0x69, 0x6d, 0x2e,
	0x73, 0x64, 0x6b, 0x2e, 0x6e, 0x65, 0x74, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e,
	0x45, 0x78, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x03, 0x65, 0x78, 0x74, 0x12, 0x1b, 0x0a,
	0x09, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x74, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x73, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x1a, 0x36, 0x0a, 0x08, 0x45, 0x78,
	0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0x79, 0x0a, 0x14, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x61,
	0x72, 0x72, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x72, 0x6f, 0x63, 0x2e, 0x69,
	0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x6e, 0x65, 0x74, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x52, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x41, 0x72, 0x72, 0x22, 0x7f, 0x0a,
	0x1a, 0x46, 0x65, 0x74, 0x63, 0x68, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x4c, 0x69, 0x6e, 0x6b,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x12, 0x27, 0x0a, 0x0f, 0x63,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x6f, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x74, 0x6f, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x78,
	0x0a, 0x1b, 0x46, 0x65, 0x74, 0x63, 0x68, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x4c, 0x69, 0x6e,
	0x6b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x59, 0x0a,
	0x15, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x72,
	0x6f, 0x63, 0x2e, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x6e, 0x65, 0x74, 0x2e, 0x43, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x52, 0x14, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x22, 0x61, 0x0a, 0x19, 0x46, 0x65, 0x74, 0x63,
	0x68, 0x4d, 0x69, 0x78, 0x65, 0x64, 0x4c, 0x69, 0x6e, 0x6b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x5f, 0x61, 0x72, 0x72, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x41, 0x72, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x77, 0x0a, 0x1a, 0x46,
	0x65, 0x74, 0x63, 0x68, 0x4d, 0x69, 0x78, 0x65, 0x64, 0x4c, 0x69, 0x6e, 0x6b, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x59, 0x0a, 0x15, 0x63, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x72, 0x6f, 0x63, 0x2e, 0x69,
	0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x6e, 0x65, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x52, 0x14,
	0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x22, 0x4f, 0x0a, 0x13, 0x53, 0x65, 0x6e, 0x64, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x12, 0x38, 0x0a, 0x0b, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x61, 0x72, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x72, 0x6f, 0x63, 0x2e, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x6e, 0x65,
	0x74, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x41, 0x72, 0x72, 0x22, 0x77, 0x0a, 0x14, 0x53, 0x65, 0x6e, 0x64, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x5f, 0x0a,
	0x19, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x61, 0x72, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x72, 0x6f, 0x63, 0x2e, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x6e, 0x65,
	0x74, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x52, 0x16, 0x73, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x41, 0x72, 0x72, 0x22, 0x51,
	0x0a, 0x0c, 0x50, 0x75, 0x73, 0x68, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x41,
	0x0a, 0x10, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x61,
	0x72, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x72, 0x6f, 0x63, 0x2e, 0x69,
	0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x6e, 0x65, 0x74, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x52, 0x0e, 0x70, 0x75, 0x73, 0x68, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x41, 0x72,
	0x72, 0x22, 0x8f, 0x03, 0x0a, 0x0b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x6f, 0x64,
	0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64,
	0x12, 0x73, 0x0a, 0x21, 0x66, 0x65, 0x74, 0x63, 0x68, 0x5f, 0x6d, 0x69, 0x78, 0x65, 0x64, 0x5f,
	0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x72, 0x6f,
	0x63, 0x2e, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x6e, 0x65, 0x74, 0x2e, 0x46, 0x65, 0x74,
	0x63, 0x68, 0x4d, 0x69, 0x78, 0x65, 0x64, 0x4c, 0x69, 0x6e, 0x6b, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x52, 0x1d, 0x66, 0x65, 0x74, 0x63, 0x68, 0x4d, 0x69, 0x78,
	0x65, 0x64, 0x4c, 0x69, 0x6e, 0x6b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x76, 0x0a, 0x22, 0x66, 0x65, 0x74, 0x63, 0x68, 0x5f, 0x73,
	0x69, 0x6e, 0x67, 0x6c, 0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x72, 0x6f, 0x63, 0x2e, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x6e,
	0x65, 0x74, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x4c, 0x69,
	0x6e, 0x6b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x52, 0x1e, 0x66,
	0x65, 0x74, 0x63, 0x68, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x62, 0x0a,
	0x1b, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x72, 0x6f, 0x63, 0x2e, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x2e,
	0x6e, 0x65, 0x74, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x52, 0x18, 0x73, 0x65, 0x6e, 0x64, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x75, 0x72, 0x6c, 0x22, 0xca, 0x03, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x42, 0x6f, 0x64, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x49, 0x64, 0x12, 0x76, 0x0a, 0x22, 0x66, 0x65, 0x74, 0x63, 0x68, 0x5f, 0x6d,
	0x69, 0x78, 0x65, 0x64, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x72, 0x6f, 0x63, 0x2e, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x6e,
	0x65, 0x74, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x4d, 0x69, 0x78, 0x65, 0x64, 0x4c, 0x69, 0x6e,
	0x6b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x52, 0x1e, 0x66,
	0x65, 0x74, 0x63, 0x68, 0x4d, 0x69, 0x78, 0x65, 0x64, 0x4c, 0x69, 0x6e, 0x6b, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x79, 0x0a,
	0x23, 0x66, 0x65, 0x74, 0x63, 0x68, 0x5f, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x5f, 0x6c, 0x69,
	0x6e, 0x6b, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x72, 0x6f, 0x63,
	0x2e, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x6e, 0x65, 0x74, 0x2e, 0x46, 0x65, 0x74, 0x63,
	0x68, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x52, 0x1f, 0x66, 0x65, 0x74, 0x63, 0x68, 0x53, 0x69,
	0x6e, 0x67, 0x6c, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x65, 0x0a, 0x1c, 0x73, 0x65, 0x6e, 0x64,
	0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x72, 0x6f, 0x63, 0x2e, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x6e, 0x65, 0x74, 0x2e,
	0x53, 0x65, 0x6e, 0x64, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x52, 0x19, 0x73, 0x65, 0x6e, 0x64, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x3f, 0x0a, 0x0c, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x72, 0x6f, 0x63, 0x2e, 0x69, 0x6d, 0x2e, 0x73,
	0x64, 0x6b, 0x2e, 0x6e, 0x65, 0x74, 0x2e, 0x50, 0x75, 0x73, 0x68, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x52, 0x0b, 0x70, 0x75, 0x73, 0x68, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x42, 0x1d, 0x5a, 0x0d, 0x2e, 0x2f, 0x3b, 0x69, 0x6d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x70,
	0x62, 0xaa, 0x02, 0x0b, 0x49, 0x4d, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_model_im_proto_rawDescOnce sync.Once
	file_model_im_proto_rawDescData []byte
)

func file_model_im_proto_rawDescGZIP() []byte {
	file_model_im_proto_rawDescOnce.Do(func() {
		file_model_im_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_model_im_proto_rawDesc), len(file_model_im_proto_rawDesc)))
	})
	return file_model_im_proto_rawDescData
}

var file_model_im_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_model_im_proto_goTypes = []any{
	(*Conversation)(nil),                // 0: roc.im.sdk.net.Conversation
	(*Message)(nil),                     // 1: roc.im.sdk.net.Message
	(*ConversationMessages)(nil),        // 2: roc.im.sdk.net.ConversationMessages
	(*FetchSingleLinkMessagesReq)(nil),  // 3: roc.im.sdk.net.FetchSingleLinkMessagesReq
	(*FetchSingleLinkMessagesResp)(nil), // 4: roc.im.sdk.net.FetchSingleLinkMessagesResp
	(*FetchMixedLinkMessagesReq)(nil),   // 5: roc.im.sdk.net.FetchMixedLinkMessagesReq
	(*FetchMixedLinkMessagesResp)(nil),  // 6: roc.im.sdk.net.FetchMixedLinkMessagesResp
	(*SendBatchMessageReq)(nil),         // 7: roc.im.sdk.net.SendBatchMessageReq
	(*SendBatchMessageResp)(nil),        // 8: roc.im.sdk.net.SendBatchMessageResp
	(*PushMessages)(nil),                // 9: roc.im.sdk.net.PushMessages
	(*RequestBody)(nil),                 // 10: roc.im.sdk.net.RequestBody
	(*ResponseBody)(nil),                // 11: roc.im.sdk.net.ResponseBody
	nil,                                 // 12: roc.im.sdk.net.Conversation.ExtEntry
	nil,                                 // 13: roc.im.sdk.net.Message.ExtEntry
}
var file_model_im_proto_depIdxs = []int32{
	12, // 0: roc.im.sdk.net.Conversation.ext:type_name -> roc.im.sdk.net.Conversation.ExtEntry
	13, // 1: roc.im.sdk.net.Message.ext:type_name -> roc.im.sdk.net.Message.ExtEntry
	1,  // 2: roc.im.sdk.net.ConversationMessages.message_arr:type_name -> roc.im.sdk.net.Message
	2,  // 3: roc.im.sdk.net.FetchSingleLinkMessagesResp.conversation_messages:type_name -> roc.im.sdk.net.ConversationMessages
	2,  // 4: roc.im.sdk.net.FetchMixedLinkMessagesResp.conversation_messages:type_name -> roc.im.sdk.net.ConversationMessages
	1,  // 5: roc.im.sdk.net.SendBatchMessageReq.message_arr:type_name -> roc.im.sdk.net.Message
	8,  // 6: roc.im.sdk.net.SendBatchMessageResp.send_message_response_arr:type_name -> roc.im.sdk.net.SendBatchMessageResp
	1,  // 7: roc.im.sdk.net.PushMessages.push_message_arr:type_name -> roc.im.sdk.net.Message
	5,  // 8: roc.im.sdk.net.RequestBody.fetch_mixed_link_messages_request:type_name -> roc.im.sdk.net.FetchMixedLinkMessagesReq
	3,  // 9: roc.im.sdk.net.RequestBody.fetch_single_link_messages_request:type_name -> roc.im.sdk.net.FetchSingleLinkMessagesReq
	7,  // 10: roc.im.sdk.net.RequestBody.send_batch_messages_request:type_name -> roc.im.sdk.net.SendBatchMessageReq
	6,  // 11: roc.im.sdk.net.ResponseBody.fetch_mixed_link_messages_response:type_name -> roc.im.sdk.net.FetchMixedLinkMessagesResp
	4,  // 12: roc.im.sdk.net.ResponseBody.fetch_single_link_messages_response:type_name -> roc.im.sdk.net.FetchSingleLinkMessagesResp
	8,  // 13: roc.im.sdk.net.ResponseBody.send_batch_messages_response:type_name -> roc.im.sdk.net.SendBatchMessageResp
	9,  // 14: roc.im.sdk.net.ResponseBody.push_message:type_name -> roc.im.sdk.net.PushMessages
	15, // [15:15] is the sub-list for method output_type
	15, // [15:15] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_model_im_proto_init() }
func file_model_im_proto_init() {
	if File_model_im_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_model_im_proto_rawDesc), len(file_model_im_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_model_im_proto_goTypes,
		DependencyIndexes: file_model_im_proto_depIdxs,
		MessageInfos:      file_model_im_proto_msgTypes,
	}.Build()
	File_model_im_proto = out.File
	file_model_im_proto_goTypes = nil
	file_model_im_proto_depIdxs = nil
}
